<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [.\Objects\fastModel.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image .\Objects\fastModel.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 6190004: Last Updated: Thu Apr 20 15:29:15 2023
<BR><P>
<H3>Maximum Stack Usage =       1536 bytes + Unknown(Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
__rt_entry_main &rArr; main &rArr; disp_adapter0_task &rArr; arm_2d_scene_player_task &rArr; arm_2d_helper_pfb_task &rArr; arm_2d_helper_draw_box &rArr; arm_2dp_rgb565_fill_colour_with_opacity &rArr; __arm_2d_op_invoke &rArr; __arm_2d_op_frontend &rArr; __arm_2d_op_frontend_op_decoder &rArr; __arm_2d_op_frontend_region_process_with_src &rArr; __tile_clipped_pave &rArr; __arm_2d_region_calculator &rArr; __arm_2d_issue_sub_task_copy_origin_masks &rArr; __arm_2d_sub_task_depose &rArr; __depose_virtual_resource &rArr; __arm_2d_tile_get_root &rArr; __arm_2d_tile_get_1st_derived_child_or_root &rArr; arm_2d_region_intersect
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[1]">NMI_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1]">NMI_Handler</a><BR>
 <LI><a href="#[2]">HardFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[2]">HardFault_Handler</a><BR>
 <LI><a href="#[3]">MemManage_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[3]">MemManage_Handler</a><BR>
 <LI><a href="#[4]">BusFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[4]">BusFault_Handler</a><BR>
 <LI><a href="#[5]">UsageFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[5]">UsageFault_Handler</a><BR>
 <LI><a href="#[6]">SVC_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[6]">SVC_Handler</a><BR>
 <LI><a href="#[7]">DebugMon_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[7]">DebugMon_Handler</a><BR>
 <LI><a href="#[8]">PendSV_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[8]">PendSV_Handler</a><BR>
 <LI><a href="#[14]">DUALTIMER_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[14]">DUALTIMER_Handler</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[2d]">$Super$$SysTick_Handler</a> from main.o(.text.SysTick_Handler) referenced from systick_wrapper_ual.o(.text)
 <LI><a href="#[35]">ARM_2D_A1_FONT_GET_CHAR_DESCRIPTOR_HANDLER</a> from lcd_printf.o(.text.ARM_2D_A1_FONT_GET_CHAR_DESCRIPTOR_HANDLER) referenced from glcd_fonts.o(.rodata.ARM_2D_FONT_6x8)
 <LI><a href="#[4]">BusFault_Handler</a> from startup_cmsdk_cm4.o(.text) referenced from startup_cmsdk_cm4.o(RESET)
 <LI><a href="#[14]">DUALTIMER_Handler</a> from startup_cmsdk_cm4.o(.text) referenced from startup_cmsdk_cm4.o(RESET)
 <LI><a href="#[7]">DebugMon_Handler</a> from startup_cmsdk_cm4.o(.text) referenced from startup_cmsdk_cm4.o(RESET)
 <LI><a href="#[17]">ETHERNET_Handler</a> from startup_cmsdk_cm4.o(.text) referenced from startup_cmsdk_cm4.o(RESET)
 <LI><a href="#[10]">GPIO0ALL_Handler</a> from startup_cmsdk_cm4.o(.text) referenced from startup_cmsdk_cm4.o(RESET)
 <LI><a href="#[22]">GPIO0_0_Handler</a> from startup_cmsdk_cm4.o(.text) referenced from startup_cmsdk_cm4.o(RESET)
 <LI><a href="#[23]">GPIO0_1_Handler</a> from startup_cmsdk_cm4.o(.text) referenced from startup_cmsdk_cm4.o(RESET)
 <LI><a href="#[24]">GPIO0_2_Handler</a> from startup_cmsdk_cm4.o(.text) referenced from startup_cmsdk_cm4.o(RESET)
 <LI><a href="#[25]">GPIO0_3_Handler</a> from startup_cmsdk_cm4.o(.text) referenced from startup_cmsdk_cm4.o(RESET)
 <LI><a href="#[26]">GPIO0_4_Handler</a> from startup_cmsdk_cm4.o(.text) referenced from startup_cmsdk_cm4.o(RESET)
 <LI><a href="#[27]">GPIO0_5_Handler</a> from startup_cmsdk_cm4.o(.text) referenced from startup_cmsdk_cm4.o(RESET)
 <LI><a href="#[28]">GPIO0_6_Handler</a> from startup_cmsdk_cm4.o(.text) referenced from startup_cmsdk_cm4.o(RESET)
 <LI><a href="#[29]">GPIO0_7_Handler</a> from startup_cmsdk_cm4.o(.text) referenced from startup_cmsdk_cm4.o(RESET)
 <LI><a href="#[11]">GPIO1ALL_Handler</a> from startup_cmsdk_cm4.o(.text) referenced from startup_cmsdk_cm4.o(RESET)
 <LI><a href="#[1a]">GPIO2_Handler</a> from startup_cmsdk_cm4.o(.text) referenced from startup_cmsdk_cm4.o(RESET)
 <LI><a href="#[1b]">GPIO3_Handler</a> from startup_cmsdk_cm4.o(.text) referenced from startup_cmsdk_cm4.o(RESET)
 <LI><a href="#[2]">HardFault_Handler</a> from startup_cmsdk_cm4.o(.text) referenced from startup_cmsdk_cm4.o(RESET)
 <LI><a href="#[18]">I2S_Handler</a> from startup_cmsdk_cm4.o(.text) referenced from startup_cmsdk_cm4.o(RESET)
 <LI><a href="#[3]">MemManage_Handler</a> from startup_cmsdk_cm4.o(.text) referenced from startup_cmsdk_cm4.o(RESET)
 <LI><a href="#[1]">NMI_Handler</a> from startup_cmsdk_cm4.o(.text) referenced from startup_cmsdk_cm4.o(RESET)
 <LI><a href="#[8]">PendSV_Handler</a> from startup_cmsdk_cm4.o(.text) referenced from startup_cmsdk_cm4.o(RESET)
 <LI><a href="#[0]">Reset_Handler</a> from startup_cmsdk_cm4.o(.text) referenced from startup_cmsdk_cm4.o(RESET)
 <LI><a href="#[15]">SPI_0_1_Handler</a> from startup_cmsdk_cm4.o(.text) referenced from startup_cmsdk_cm4.o(RESET)
 <LI><a href="#[20]">SPI_2_Handler</a> from startup_cmsdk_cm4.o(.text) referenced from startup_cmsdk_cm4.o(RESET)
 <LI><a href="#[21]">SPI_3_4_Handler</a> from startup_cmsdk_cm4.o(.text) referenced from startup_cmsdk_cm4.o(RESET)
 <LI><a href="#[6]">SVC_Handler</a> from startup_cmsdk_cm4.o(.text) referenced from startup_cmsdk_cm4.o(RESET)
 <LI><a href="#[9]">SysTick_Handler</a> from systick_wrapper_ual.o(.text) referenced from startup_cmsdk_cm4.o(RESET)
 <LI><a href="#[2a]">SystemInit</a> from system_cmsdk_cm4.o(.text.SystemInit) referenced from startup_cmsdk_cm4.o(.text)
 <LI><a href="#[12]">TIMER0_Handler</a> from startup_cmsdk_cm4.o(.text) referenced from startup_cmsdk_cm4.o(RESET)
 <LI><a href="#[13]">TIMER1_Handler</a> from startup_cmsdk_cm4.o(.text) referenced from startup_cmsdk_cm4.o(RESET)
 <LI><a href="#[19]">TOUCHSCREEN_Handler</a> from startup_cmsdk_cm4.o(.text) referenced from startup_cmsdk_cm4.o(RESET)
 <LI><a href="#[a]">UART0RX_Handler</a> from startup_cmsdk_cm4.o(.text) referenced from startup_cmsdk_cm4.o(RESET)
 <LI><a href="#[b]">UART0TX_Handler</a> from startup_cmsdk_cm4.o(.text) referenced from startup_cmsdk_cm4.o(RESET)
 <LI><a href="#[c]">UART1RX_Handler</a> from startup_cmsdk_cm4.o(.text) referenced from startup_cmsdk_cm4.o(RESET)
 <LI><a href="#[d]">UART1TX_Handler</a> from startup_cmsdk_cm4.o(.text) referenced from startup_cmsdk_cm4.o(RESET)
 <LI><a href="#[e]">UART2RX_Handler</a> from startup_cmsdk_cm4.o(.text) referenced from startup_cmsdk_cm4.o(RESET)
 <LI><a href="#[f]">UART2TX_Handler</a> from startup_cmsdk_cm4.o(.text) referenced from startup_cmsdk_cm4.o(RESET)
 <LI><a href="#[1c]">UART3RX_Handler</a> from startup_cmsdk_cm4.o(.text) referenced from startup_cmsdk_cm4.o(RESET)
 <LI><a href="#[1d]">UART3TX_Handler</a> from startup_cmsdk_cm4.o(.text) referenced from startup_cmsdk_cm4.o(RESET)
 <LI><a href="#[1e]">UART4RX_Handler</a> from startup_cmsdk_cm4.o(.text) referenced from startup_cmsdk_cm4.o(RESET)
 <LI><a href="#[1f]">UART4TX_Handler</a> from startup_cmsdk_cm4.o(.text) referenced from startup_cmsdk_cm4.o(RESET)
 <LI><a href="#[16]">UART_0_1_2_OVF_Handler</a> from startup_cmsdk_cm4.o(.text) referenced from startup_cmsdk_cm4.o(RESET)
 <LI><a href="#[5]">UsageFault_Handler</a> from startup_cmsdk_cm4.o(.text) referenced from startup_cmsdk_cm4.o(RESET)
 <LI><a href="#[38]">__arm_2d_rgb16_sw_colour_filling</a> from arm_2d_draw.o(.text.__arm_2d_rgb16_sw_colour_filling) referenced from arm_2d_draw.o(.rodata.LOW_LEVEL_IO__ARM_2D_IO_FILL_COLOUR_RGB16)
 <LI><a href="#[36]">__arm_2d_rgb16_sw_draw_pattern</a> from arm_2d_draw.o(.text.__arm_2d_rgb16_sw_draw_pattern) referenced from arm_2d_draw.o(.rodata.LOW_LEVEL_IO__ARM_2D_IO_DRAW_PATTERN_RGB16)
 <LI><a href="#[37]">__arm_2d_rgb565_sw_colour_filling_with_mask_and_opacity</a> from arm_2d_alpha_blending.o(.text.__arm_2d_rgb565_sw_colour_filling_with_mask_and_opacity) referenced from arm_2d_alpha_blending.o(.rodata.LOW_LEVEL_IO__ARM_2D_IO_FILL_COLOUR_MASK_AND_OPACITY_RGB565)
 <LI><a href="#[39]">__arm_2d_rgb565_sw_colour_filling_with_opacity</a> from arm_2d_alpha_blending.o(.text.__arm_2d_rgb565_sw_colour_filling_with_opacity) referenced from arm_2d_alpha_blending.o(.rodata.LOW_LEVEL_IO__ARM_2D_IO_FILL_COLOUR_WITH_OPACITY_RGB565)
 <LI><a href="#[33]">__glcd0_pfb_render_handler</a> from arm_2d_disp_adapter_0.o(.text.__glcd0_pfb_render_handler) referenced from arm_2d_disp_adapter_0.o(.rodata..L__const.__user_scene_player_init.tCFG)
 <LI><a href="#[2b]">__main</a> from __main.o(!!!main) referenced from startup_cmsdk_cm4.o(.text)
 <LI><a href="#[34]">__on_each_frame_complete</a> from arm_2d_disp_adapter_0.o(.text.__on_each_frame_complete) referenced from arm_2d_disp_adapter_0.o(.rodata..L__const.__user_scene_player_init.tCFG)
 <LI><a href="#[3d]">__on_frame_complete</a> from arm_2d_disp_adapter_0.o(.text.__on_frame_complete) referenced from arm_2d_disp_adapter_0.o(.data.disp_adapter0_init.s_tScenes)
 <LI><a href="#[3c]">__on_frame_start</a> from arm_2d_disp_adapter_0.o(.text.__on_frame_start) referenced from arm_2d_disp_adapter_0.o(.data.disp_adapter0_init.s_tScenes)
 <LI><a href="#[3a]">__perf_counter_init</a> from perf_counter.o(.text.__perf_counter_init) referenced from perf_counter.o(.init_array)
 <LI><a href="#[3b]">__pfb_draw_handler</a> from arm_2d_disp_adapter_0.o(.text.__pfb_draw_handler) referenced from arm_2d_disp_adapter_0.o(.data.disp_adapter0_init.s_tScenes)
 <LI><a href="#[32]">__pfb_draw_navigation</a> from arm_2d_disp_adapter_0.o(.text.__pfb_draw_navigation) referenced 2 times from arm_2d_disp_adapter_0.o(.text.disp_adapter0_init)
 <LI><a href="#[31]">_get_lc_ctype</a> from lc_ctype_c.o(locale$$code) referenced from rt_ctype_table.o(.text)
 <LI><a href="#[2f]">_printf_input_char</a> from _printf_char_common.o(.text) referenced from _printf_char_common.o(.text)
 <LI><a href="#[2e]">_snputc</a> from _snputc.o(.text) referenced from vsnprintf.o(.text)
 <LI><a href="#[30]">fputc</a> from fputc.o(i.fputc) referenced from _printf_char_file.o(.text)
 <LI><a href="#[2c]">user_code_insert_to_systick_handler</a> from perf_counter.o(.text.user_code_insert_to_systick_handler) referenced from systick_wrapper_ual.o(.text)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[2b]"></a>__main</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, __main.o(!!!main))
<BR><BR>[Calls]<UL><LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
<LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_cmsdk_cm4.o(.text)
</UL>
<P><STRONG><a name="[3f]"></a>__scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter))
<BR><BR>[Called By]<UL><LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
</UL>

<P><STRONG><a name="[41]"></a>__scatterload_rt2</STRONG> (Thumb, 44 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
</UL>

<P><STRONG><a name="[168]"></a>__scatterload_rt2_thumb_only</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)

<P><STRONG><a name="[169]"></a>__scatterload_null</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)

<P><STRONG><a name="[42]"></a>__scatterload_copy</STRONG> (Thumb, 26 bytes, Stack size unknown bytes, __scatter_copy.o(!!handler_copy), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload_copy
</UL>
<BR>[Called By]<UL><LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload_copy
</UL>

<P><STRONG><a name="[16a]"></a>__scatterload_zeroinit</STRONG> (Thumb, 28 bytes, Stack size unknown bytes, __scatter_zi.o(!!handler_zi), UNUSED)

<P><STRONG><a name="[43]"></a>_printf_n</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_n.o(.ARM.Collect$$_printf_percent$$00000001))
<BR><BR>[Calls]<UL><LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_charcount
</UL>

<P><STRONG><a name="[9a]"></a>_printf_percent</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_percent.o(.ARM.Collect$$_printf_percent$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__printf
</UL>

<P><STRONG><a name="[45]"></a>_printf_p</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_p.o(.ARM.Collect$$_printf_percent$$00000002))
<BR><BR>[Stack]<UL><LI>Max Depth = 64 + Unknown Stack Size
<LI>Call Chain = _printf_p &rArr; _printf_hex_ptr &rArr; _printf_longlong_hex &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_hex_ptr
</UL>

<P><STRONG><a name="[47]"></a>_printf_f</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_f.o(.ARM.Collect$$_printf_percent$$00000003))
<BR><BR>[Stack]<UL><LI>Max Depth = 324 + Unknown Stack Size
<LI>Call Chain = _printf_f &rArr; _printf_fp_dec &rArr; _printf_fp_dec_real &rArr; _fp_digits &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec
</UL>

<P><STRONG><a name="[49]"></a>_printf_e</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_e.o(.ARM.Collect$$_printf_percent$$00000004))
<BR><BR>[Stack]<UL><LI>Max Depth = 324 + Unknown Stack Size
<LI>Call Chain = _printf_e &rArr; _printf_fp_dec &rArr; _printf_fp_dec_real &rArr; _fp_digits &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec
</UL>

<P><STRONG><a name="[4a]"></a>_printf_g</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_g.o(.ARM.Collect$$_printf_percent$$00000005))
<BR><BR>[Stack]<UL><LI>Max Depth = 324 + Unknown Stack Size
<LI>Call Chain = _printf_g &rArr; _printf_fp_dec &rArr; _printf_fp_dec_real &rArr; _fp_digits &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec
</UL>

<P><STRONG><a name="[4b]"></a>_printf_a</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_a.o(.ARM.Collect$$_printf_percent$$00000006))
<BR><BR>[Stack]<UL><LI>Max Depth = 112 + Unknown Stack Size
<LI>Call Chain = _printf_a &rArr; _printf_fp_hex &rArr; _printf_fp_hex_real &rArr; _printf_fp_infnan &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_hex
</UL>

<P><STRONG><a name="[16b]"></a>_printf_ll</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_ll.o(.ARM.Collect$$_printf_percent$$00000007))

<P><STRONG><a name="[4d]"></a>_printf_i</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_i.o(.ARM.Collect$$_printf_percent$$00000008))
<BR><BR>[Stack]<UL><LI>Max Depth = 72 + Unknown Stack Size
<LI>Call Chain = _printf_i &rArr; _printf_int_dec &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec
</UL>

<P><STRONG><a name="[4f]"></a>_printf_d</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_d.o(.ARM.Collect$$_printf_percent$$00000009))
<BR><BR>[Stack]<UL><LI>Max Depth = 72 + Unknown Stack Size
<LI>Call Chain = _printf_d &rArr; _printf_int_dec &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec
</UL>

<P><STRONG><a name="[50]"></a>_printf_u</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_u.o(.ARM.Collect$$_printf_percent$$0000000A))
<BR><BR>[Stack]<UL><LI>Max Depth = 72 + Unknown Stack Size
<LI>Call Chain = _printf_u &rArr; _printf_int_dec &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec
</UL>

<P><STRONG><a name="[51]"></a>_printf_o</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_o.o(.ARM.Collect$$_printf_percent$$0000000B))
<BR><BR>[Stack]<UL><LI>Max Depth = 64 + Unknown Stack Size
<LI>Call Chain = _printf_o &rArr; _printf_int_oct &rArr; _printf_longlong_oct &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_oct
</UL>

<P><STRONG><a name="[53]"></a>_printf_x</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_x.o(.ARM.Collect$$_printf_percent$$0000000C))
<BR><BR>[Stack]<UL><LI>Max Depth = 80 + Unknown Stack Size
<LI>Call Chain = _printf_x &rArr; _printf_int_hex &rArr; _printf_longlong_hex &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_hex
</UL>

<P><STRONG><a name="[55]"></a>_printf_lli</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_lli.o(.ARM.Collect$$_printf_percent$$0000000D))
<BR><BR>[Stack]<UL><LI>Max Depth = 72 + Unknown Stack Size
<LI>Call Chain = _printf_lli &rArr; _printf_longlong_dec &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_dec
</UL>

<P><STRONG><a name="[57]"></a>_printf_lld</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_lld.o(.ARM.Collect$$_printf_percent$$0000000E))
<BR><BR>[Stack]<UL><LI>Max Depth = 72 + Unknown Stack Size
<LI>Call Chain = _printf_lld &rArr; _printf_longlong_dec &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_dec
</UL>

<P><STRONG><a name="[58]"></a>_printf_llu</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_llu.o(.ARM.Collect$$_printf_percent$$0000000F))
<BR><BR>[Stack]<UL><LI>Max Depth = 72 + Unknown Stack Size
<LI>Call Chain = _printf_llu &rArr; _printf_longlong_dec &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_dec
</UL>

<P><STRONG><a name="[59]"></a>_printf_llo</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_llo.o(.ARM.Collect$$_printf_percent$$00000010))
<BR><BR>[Stack]<UL><LI>Max Depth = 56 + Unknown Stack Size
<LI>Call Chain = _printf_llo &rArr; _printf_ll_oct &rArr; _printf_longlong_oct &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_ll_oct
</UL>

<P><STRONG><a name="[5b]"></a>_printf_llx</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_llx.o(.ARM.Collect$$_printf_percent$$00000011))
<BR><BR>[Stack]<UL><LI>Max Depth = 64 + Unknown Stack Size
<LI>Call Chain = _printf_llx &rArr; _printf_ll_hex &rArr; _printf_longlong_hex &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_ll_hex
</UL>

<P><STRONG><a name="[16c]"></a>_printf_l</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_l.o(.ARM.Collect$$_printf_percent$$00000012))

<P><STRONG><a name="[5d]"></a>_printf_c</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_c.o(.ARM.Collect$$_printf_percent$$00000013))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = _printf_c &rArr; _printf_char &rArr; _printf_cs_common &rArr; _printf_str &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char
</UL>

<P><STRONG><a name="[5f]"></a>_printf_s</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_s.o(.ARM.Collect$$_printf_percent$$00000014))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = _printf_s &rArr; _printf_string &rArr; _printf_cs_common &rArr; _printf_str &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_string
</UL>

<P><STRONG><a name="[61]"></a>_printf_lc</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_lc.o(.ARM.Collect$$_printf_percent$$00000015))
<BR><BR>[Stack]<UL><LI>Max Depth = 88 + Unknown Stack Size
<LI>Call Chain = _printf_lc &rArr; _printf_wchar &rArr; _printf_lcs_common &rArr; _printf_wctomb &rArr; _wcrtomb
</UL>
<BR>[Calls]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_wchar
</UL>

<P><STRONG><a name="[63]"></a>_printf_ls</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_ls.o(.ARM.Collect$$_printf_percent$$00000016))
<BR><BR>[Stack]<UL><LI>Max Depth = 88 + Unknown Stack Size
<LI>Call Chain = _printf_ls &rArr; _printf_wstring &rArr; _printf_lcs_common &rArr; _printf_wctomb &rArr; _wcrtomb
</UL>
<BR>[Calls]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_wstring
</UL>

<P><STRONG><a name="[16d]"></a>_printf_percent_end</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_percent_end.o(.ARM.Collect$$_printf_percent$$00000017))

<P><STRONG><a name="[74]"></a>__rt_lib_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit.o(.ARM.Collect$$libinit$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_li
</UL>

<P><STRONG><a name="[65]"></a>__rt_lib_init_fp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000001))
<BR><BR>[Calls]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_init
</UL>

<P><STRONG><a name="[67]"></a>__rt_lib_init_heap_2</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit5.o(.ARM.Collect$$libinit$$0000000A))
<BR><BR>[Stack]<UL><LI>Max Depth = 64 + Unknown Stack Size
<LI>Call Chain = __rt_lib_init_heap_2 &rArr; _init_alloc &rArr; __rt_SIGRTMEM &rArr; __rt_SIGRTMEM_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_init_alloc
</UL>

<P><STRONG><a name="[16e]"></a>__rt_lib_init_preinit_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000006))

<P><STRONG><a name="[16f]"></a>__rt_lib_init_relocate_pie_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000004))

<P><STRONG><a name="[170]"></a>__rt_lib_init_heap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000C))

<P><STRONG><a name="[69]"></a>__rt_lib_init_lc_common</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000011))
<BR><BR>[Calls]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_locale
</UL>

<P><STRONG><a name="[171]"></a>__rt_lib_init_rand_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000010))

<P><STRONG><a name="[172]"></a>__rt_lib_init_user_alloc_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000E))

<P><STRONG><a name="[173]"></a>__rt_lib_init_lc_collate_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000013))

<P><STRONG><a name="[6b]"></a>__rt_lib_init_lc_ctype_2</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000014))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + Unknown Stack Size
<LI>Call Chain = __rt_lib_init_lc_ctype_2 &rArr; _get_lc_ctype &rArr; strcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_get_lc_ctype
</UL>

<P><STRONG><a name="[174]"></a>__rt_lib_init_lc_ctype_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000015))

<P><STRONG><a name="[175]"></a>__rt_lib_init_lc_monetary_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000017))

<P><STRONG><a name="[6c]"></a>__rt_lib_init_lc_numeric_2</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000018))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + Unknown Stack Size
<LI>Call Chain = __rt_lib_init_lc_numeric_2 &rArr; _get_lc_numeric &rArr; strcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_get_lc_numeric
</UL>

<P><STRONG><a name="[176]"></a>__rt_lib_init_atexit_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001D))

<P><STRONG><a name="[177]"></a>__rt_lib_init_clock_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000023))

<P><STRONG><a name="[178]"></a>__rt_lib_init_fp_trap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000021))

<P><STRONG><a name="[179]"></a>__rt_lib_init_getenv_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000025))

<P><STRONG><a name="[17a]"></a>__rt_lib_init_lc_numeric_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000019))

<P><STRONG><a name="[17b]"></a>__rt_lib_init_lc_time_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001B))

<P><STRONG><a name="[17c]"></a>__rt_lib_init_signal_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001F))

<P><STRONG><a name="[6e]"></a>__rt_lib_init_stdio_2</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000026))
<BR><BR>[Stack]<UL><LI>Max Depth = 332 + Unknown Stack Size
<LI>Call Chain = __rt_lib_init_stdio_2 &rArr; _initio &rArr; freopen &rArr; _fclose_internal &rArr; _fflush &rArr; _writebuf &rArr; _sys_write &rArr; stdout_putchar &rArr; EventRecordData &rArr; EventRecordItem &rArr; UnlockRecord
</UL>
<BR>[Calls]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_initio
</UL>

<P><STRONG><a name="[17d]"></a>__rt_lib_init_alloca_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000030))

<P><STRONG><a name="[17e]"></a>__rt_lib_init_argv_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002E))

<P><STRONG><a name="[70]"></a>__rt_lib_init_cpp_2</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000033))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + Unknown Stack Size
<LI>Call Chain = __rt_lib_init_cpp_2 &rArr; __cpp_initialize__aeabi_
</UL>
<BR>[Calls]<UL><LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cpp_initialize__aeabi_
</UL>

<P><STRONG><a name="[17f]"></a>__rt_lib_init_exceptions_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000032))

<P><STRONG><a name="[180]"></a>__rt_lib_init_stdio_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000027))

<P><STRONG><a name="[181]"></a>__rt_lib_init_cpp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000034))

<P><STRONG><a name="[182]"></a>__rt_lib_init_return</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000035))

<P><STRONG><a name="[79]"></a>__rt_lib_shutdown</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown.o(.ARM.Collect$$libshutdown$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit_ls
</UL>

<P><STRONG><a name="[183]"></a>__rt_lib_shutdown_cpp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000002))

<P><STRONG><a name="[71]"></a>__rt_lib_shutdown_stdio_2</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000003))
<BR><BR>[Stack]<UL><LI>Max Depth = 316 + Unknown Stack Size
<LI>Call Chain = __rt_lib_shutdown_stdio_2 &rArr; _terminateio &rArr; _fclose_internal &rArr; _fflush &rArr; _writebuf &rArr; _sys_write &rArr; stdout_putchar &rArr; EventRecordData &rArr; EventRecordItem &rArr; UnlockRecord
</UL>
<BR>[Calls]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_terminateio
</UL>

<P><STRONG><a name="[184]"></a>__rt_lib_shutdown_fp_trap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000007))

<P><STRONG><a name="[185]"></a>__rt_lib_shutdown_heap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000F))

<P><STRONG><a name="[186]"></a>__rt_lib_shutdown_return</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000010))

<P><STRONG><a name="[187]"></a>__rt_lib_shutdown_signal_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000A))

<P><STRONG><a name="[188]"></a>__rt_lib_shutdown_stdio_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000004))

<P><STRONG><a name="[189]"></a>__rt_lib_shutdown_user_alloc_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000C))

<P><STRONG><a name="[40]"></a>__rt_entry</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry.o(.ARM.Collect$$rtentry$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
<LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload_rt2
</UL>

<P><STRONG><a name="[18a]"></a>__rt_entry_presh_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$00000002))

<P><STRONG><a name="[18b]"></a>__rt_entry_sh</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry7.o(.ARM.Collect$$rtentry$$00000007))

<P><STRONG><a name="[73]"></a>__rt_entry_li</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000A))
<BR><BR>[Calls]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init
</UL>

<P><STRONG><a name="[18c]"></a>__rt_entry_postsh_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$00000009))

<P><STRONG><a name="[75]"></a>__rt_entry_main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000D))
<BR><BR>[Stack]<UL><LI>Max Depth = 1536 + Unknown Stack Size
<LI>Call Chain = __rt_entry_main &rArr; main &rArr; disp_adapter0_task &rArr; arm_2d_scene_player_task &rArr; arm_2d_helper_pfb_task &rArr; arm_2d_helper_draw_box &rArr; arm_2dp_rgb565_fill_colour_with_opacity &rArr; __arm_2d_op_invoke &rArr; __arm_2d_op_frontend &rArr; __arm_2d_op_frontend_op_decoder &rArr; __arm_2d_op_frontend_region_process_with_src &rArr; __tile_clipped_pave &rArr; __arm_2d_region_calculator &rArr; __arm_2d_issue_sub_task_copy_origin_masks &rArr; __arm_2d_sub_task_depose &rArr; __depose_virtual_resource &rArr; __arm_2d_tile_get_root &rArr; __arm_2d_tile_get_1st_derived_child_or_root &rArr; arm_2d_region_intersect
</UL>
<BR>[Calls]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>

<P><STRONG><a name="[18d]"></a>__rt_entry_postli_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000C))

<P><STRONG><a name="[ba]"></a>__rt_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit.o(.ARM.Collect$$rtexit$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>

<P><STRONG><a name="[78]"></a>__rt_exit_ls</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000003))
<BR><BR>[Calls]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_shutdown
</UL>

<P><STRONG><a name="[18e]"></a>__rt_exit_prels_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000002))

<P><STRONG><a name="[7a]"></a>__rt_exit_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_exit
</UL>

<P><STRONG><a name="[0]"></a>Reset_Handler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, startup_cmsdk_cm4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_cmsdk_cm4.o(RESET)
</UL>
<P><STRONG><a name="[1]"></a>NMI_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_cmsdk_cm4.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_cmsdk_cm4.o(RESET)
</UL>
<P><STRONG><a name="[2]"></a>HardFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_cmsdk_cm4.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_cmsdk_cm4.o(RESET)
</UL>
<P><STRONG><a name="[3]"></a>MemManage_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_cmsdk_cm4.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_cmsdk_cm4.o(RESET)
</UL>
<P><STRONG><a name="[4]"></a>BusFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_cmsdk_cm4.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_cmsdk_cm4.o(RESET)
</UL>
<P><STRONG><a name="[5]"></a>UsageFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_cmsdk_cm4.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_cmsdk_cm4.o(RESET)
</UL>
<P><STRONG><a name="[6]"></a>SVC_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_cmsdk_cm4.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_cmsdk_cm4.o(RESET)
</UL>
<P><STRONG><a name="[7]"></a>DebugMon_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_cmsdk_cm4.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugMon_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugMon_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_cmsdk_cm4.o(RESET)
</UL>
<P><STRONG><a name="[8]"></a>PendSV_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_cmsdk_cm4.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_cmsdk_cm4.o(RESET)
</UL>
<P><STRONG><a name="[14]"></a>DUALTIMER_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_cmsdk_cm4.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DUALTIMER_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DUALTIMER_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_cmsdk_cm4.o(RESET)
</UL>
<P><STRONG><a name="[17]"></a>ETHERNET_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_cmsdk_cm4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_cmsdk_cm4.o(RESET)
</UL>
<P><STRONG><a name="[10]"></a>GPIO0ALL_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_cmsdk_cm4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_cmsdk_cm4.o(RESET)
</UL>
<P><STRONG><a name="[22]"></a>GPIO0_0_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_cmsdk_cm4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_cmsdk_cm4.o(RESET)
</UL>
<P><STRONG><a name="[23]"></a>GPIO0_1_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_cmsdk_cm4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_cmsdk_cm4.o(RESET)
</UL>
<P><STRONG><a name="[24]"></a>GPIO0_2_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_cmsdk_cm4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_cmsdk_cm4.o(RESET)
</UL>
<P><STRONG><a name="[25]"></a>GPIO0_3_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_cmsdk_cm4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_cmsdk_cm4.o(RESET)
</UL>
<P><STRONG><a name="[26]"></a>GPIO0_4_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_cmsdk_cm4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_cmsdk_cm4.o(RESET)
</UL>
<P><STRONG><a name="[27]"></a>GPIO0_5_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_cmsdk_cm4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_cmsdk_cm4.o(RESET)
</UL>
<P><STRONG><a name="[28]"></a>GPIO0_6_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_cmsdk_cm4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_cmsdk_cm4.o(RESET)
</UL>
<P><STRONG><a name="[29]"></a>GPIO0_7_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_cmsdk_cm4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_cmsdk_cm4.o(RESET)
</UL>
<P><STRONG><a name="[11]"></a>GPIO1ALL_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_cmsdk_cm4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_cmsdk_cm4.o(RESET)
</UL>
<P><STRONG><a name="[1a]"></a>GPIO2_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_cmsdk_cm4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_cmsdk_cm4.o(RESET)
</UL>
<P><STRONG><a name="[1b]"></a>GPIO3_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_cmsdk_cm4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_cmsdk_cm4.o(RESET)
</UL>
<P><STRONG><a name="[18]"></a>I2S_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_cmsdk_cm4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_cmsdk_cm4.o(RESET)
</UL>
<P><STRONG><a name="[15]"></a>SPI_0_1_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_cmsdk_cm4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_cmsdk_cm4.o(RESET)
</UL>
<P><STRONG><a name="[20]"></a>SPI_2_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_cmsdk_cm4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_cmsdk_cm4.o(RESET)
</UL>
<P><STRONG><a name="[21]"></a>SPI_3_4_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_cmsdk_cm4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_cmsdk_cm4.o(RESET)
</UL>
<P><STRONG><a name="[12]"></a>TIMER0_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_cmsdk_cm4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_cmsdk_cm4.o(RESET)
</UL>
<P><STRONG><a name="[13]"></a>TIMER1_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_cmsdk_cm4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_cmsdk_cm4.o(RESET)
</UL>
<P><STRONG><a name="[19]"></a>TOUCHSCREEN_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_cmsdk_cm4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_cmsdk_cm4.o(RESET)
</UL>
<P><STRONG><a name="[a]"></a>UART0RX_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_cmsdk_cm4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_cmsdk_cm4.o(RESET)
</UL>
<P><STRONG><a name="[b]"></a>UART0TX_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_cmsdk_cm4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_cmsdk_cm4.o(RESET)
</UL>
<P><STRONG><a name="[c]"></a>UART1RX_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_cmsdk_cm4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_cmsdk_cm4.o(RESET)
</UL>
<P><STRONG><a name="[d]"></a>UART1TX_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_cmsdk_cm4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_cmsdk_cm4.o(RESET)
</UL>
<P><STRONG><a name="[e]"></a>UART2RX_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_cmsdk_cm4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_cmsdk_cm4.o(RESET)
</UL>
<P><STRONG><a name="[f]"></a>UART2TX_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_cmsdk_cm4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_cmsdk_cm4.o(RESET)
</UL>
<P><STRONG><a name="[1c]"></a>UART3RX_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_cmsdk_cm4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_cmsdk_cm4.o(RESET)
</UL>
<P><STRONG><a name="[1d]"></a>UART3TX_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_cmsdk_cm4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_cmsdk_cm4.o(RESET)
</UL>
<P><STRONG><a name="[1e]"></a>UART4RX_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_cmsdk_cm4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_cmsdk_cm4.o(RESET)
</UL>
<P><STRONG><a name="[1f]"></a>UART4TX_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_cmsdk_cm4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_cmsdk_cm4.o(RESET)
</UL>
<P><STRONG><a name="[16]"></a>UART_0_1_2_OVF_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_cmsdk_cm4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_cmsdk_cm4.o(RESET)
</UL>
<P><STRONG><a name="[9]"></a>SysTick_Handler</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, systick_wrapper_ual.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_cmsdk_cm4.o(RESET)
</UL>
<P><STRONG><a name="[18f]"></a>__ensure_systick_wrapper</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, systick_wrapper_ual.o(.text), UNUSED)

<P><STRONG><a name="[7c]"></a>malloc</STRONG> (Thumb, 94 bytes, Stack size 16 bytes, h1_alloc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_Full
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_heap_descriptor
</UL>
<BR>[Called By]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fopen
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__flsbuf
</UL>

<P><STRONG><a name="[80]"></a>__aeabi_uldivmod</STRONG> (Thumb, 0 bytes, Stack size 48 bytes, lludivv7m.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = __aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__on_each_frame_complete
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ll_sdiv
</UL>

<P><STRONG><a name="[190]"></a>_ll_udiv</STRONG> (Thumb, 240 bytes, Stack size 48 bytes, lludivv7m.o(.text), UNUSED)

<P><STRONG><a name="[141]"></a>__aeabi_ldivmod</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, llsdiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __aeabi_ldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_2d_helper_convert_ticks_to_ms
</UL>

<P><STRONG><a name="[7f]"></a>_ll_sdiv</STRONG> (Thumb, 116 bytes, Stack size 24 bytes, llsdiv.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>

<P><STRONG><a name="[81]"></a>printf</STRONG> (Thumb, 20 bytes, Stack size 24 bytes, printf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 144 + Unknown Stack Size
<LI>Call Chain = printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_file
</UL>
<BR>[Called By]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[83]"></a>vsnprintf</STRONG> (Thumb, 56 bytes, Stack size 24 bytes, vsnprintf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 128 + Unknown Stack Size
<LI>Call Chain = vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_common
</UL>
<BR>[Called By]<UL><LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_lcd_printf
</UL>

<P><STRONG><a name="[cc]"></a>__aeabi_memcpy</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rt_memcpy_v6.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventRecordData
</UL>

<P><STRONG><a name="[85]"></a>__rt_memcpy</STRONG> (Thumb, 138 bytes, Stack size 0 bytes, rt_memcpy_v6.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>

<P><STRONG><a name="[191]"></a>_memcpy_lastbytes</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memcpy_v6.o(.text), UNUSED)

<P><STRONG><a name="[86]"></a>__aeabi_memcpy4</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, rt_memcpy_w.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_2d_helper_pfb_init
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_scene_player_init
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_memcpy
</UL>

<P><STRONG><a name="[192]"></a>__aeabi_memcpy8</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, rt_memcpy_w.o(.text), UNUSED)

<P><STRONG><a name="[193]"></a>__rt_memcpy_w</STRONG> (Thumb, 100 bytes, Stack size 8 bytes, rt_memcpy_w.o(.text), UNUSED)

<P><STRONG><a name="[194]"></a>_memcpy_lastbytes_aligned</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memcpy_w.o(.text), UNUSED)

<P><STRONG><a name="[a6]"></a>__aeabi_memclr4</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memclr_w.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_2d_scene_player_task
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventRecorderInitialize
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_2d_op_init
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__arm_2d_init
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__arm_2d_issue_sub_task_tile_process
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_initio
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fclose_internal
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fopen
</UL>

<P><STRONG><a name="[d5]"></a>__aeabi_memclr8</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memclr_w.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_2d_helper_pfb_init
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventRecorderInitialize
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_scene_player_init
</UL>

<P><STRONG><a name="[195]"></a>__rt_memclr_w</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memclr_w.o(.text), UNUSED)

<P><STRONG><a name="[196]"></a>_memset_w</STRONG> (Thumb, 74 bytes, Stack size 4 bytes, rt_memclr_w.o(.text), UNUSED)

<P><STRONG><a name="[13f]"></a>strcmp</STRONG> (Thumb, 124 bytes, Stack size 8 bytes, strcmpv7em.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_open
<LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_get_lc_ctype
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_get_lc_numeric
</UL>

<P><STRONG><a name="[3e]"></a>__cpp_initialize__aeabi_</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, init_aeabi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __cpp_initialize__aeabi_
</UL>
<BR>[Called By]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init_cpp_2
</UL>

<P><STRONG><a name="[7d]"></a>__rt_heap_descriptor</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, rt_heap_descriptor_intlibspace.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_init_alloc
</UL>

<P><STRONG><a name="[197]"></a>__use_no_heap</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hguard.o(.text), UNUSED)

<P><STRONG><a name="[198]"></a>__heap$guard</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hguard.o(.text), UNUSED)

<P><STRONG><a name="[199]"></a>_terminate_user_alloc</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, init_alloc.o(.text), UNUSED)

<P><STRONG><a name="[19a]"></a>_init_user_alloc</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, init_alloc.o(.text), UNUSED)

<P><STRONG><a name="[7e]"></a>__Heap_Full</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, init_alloc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_ProvideMemory
</UL>
<BR>[Called By]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
</UL>

<P><STRONG><a name="[88]"></a>__Heap_Broken</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, init_alloc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTMEM
</UL>

<P><STRONG><a name="[68]"></a>_init_alloc</STRONG> (Thumb, 94 bytes, Stack size 24 bytes, init_alloc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = _init_alloc &rArr; __rt_SIGRTMEM &rArr; __rt_SIGRTMEM_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTMEM
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_ProvideMemory
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_Initialize
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_heap_descriptor
</UL>
<BR>[Called By]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init_heap_2
</UL>

<P><STRONG><a name="[8a]"></a>__Heap_Initialize</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, h1_init.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_init_alloc
</UL>

<P><STRONG><a name="[19b]"></a>__Heap_DescSize</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, h1_init.o(.text), UNUSED)

<P><STRONG><a name="[8b]"></a>free</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, h1_free.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = free
</UL>
<BR>[Calls]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_heap_descriptor
</UL>
<BR>[Called By]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_terminateio
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_ProvideMemory
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fclose_internal
</UL>

<P><STRONG><a name="[8d]"></a>_printf_pre_padding</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, _printf_pad.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _printf_pre_padding
</UL>
<BR>[Called By]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_hex_real
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec_real
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_wctomb
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_str
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_infnan
</UL>

<P><STRONG><a name="[8e]"></a>_printf_post_padding</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, _printf_pad.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _printf_post_padding
</UL>
<BR>[Called By]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_hex_real
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec_real
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_wctomb
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_str
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_infnan
</UL>

<P><STRONG><a name="[8f]"></a>_printf_truncate_signed</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, _printf_truncate.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec
</UL>

<P><STRONG><a name="[90]"></a>_printf_truncate_unsigned</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, _printf_truncate.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_hex
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_oct
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec
</UL>

<P><STRONG><a name="[8c]"></a>_printf_str</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, _printf_str.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = _printf_str &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
</UL>
<BR>[Called By]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_cs_common
</UL>

<P><STRONG><a name="[4e]"></a>_printf_int_dec</STRONG> (Thumb, 104 bytes, Stack size 24 bytes, _printf_dec.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = _printf_int_dec &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_truncate_unsigned
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_truncate_signed
</UL>
<BR>[Called By]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_u
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_d
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_i
</UL>

<P><STRONG><a name="[44]"></a>_printf_charcount</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, _printf_charcount.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_n
</UL>

<P><STRONG><a name="[84]"></a>_printf_char_common</STRONG> (Thumb, 32 bytes, Stack size 64 bytes, _printf_char_common.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104 + Unknown Stack Size
<LI>Call Chain = _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__printf
</UL>
<BR>[Called By]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vsnprintf
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_file
</UL>

<P><STRONG><a name="[2e]"></a>_snputc</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, _snputc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> vsnprintf.o(.text)
</UL>
<P><STRONG><a name="[82]"></a>_printf_char_file</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, _printf_char_file.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 120 + Unknown Stack Size
<LI>Call Chain = _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ferror
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_common
</UL>
<BR>[Called By]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printf
</UL>

<P><STRONG><a name="[94]"></a>_printf_wctomb</STRONG> (Thumb, 182 bytes, Stack size 56 bytes, _printf_wctomb.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = _printf_wctomb &rArr; _wcrtomb
</UL>
<BR>[Calls]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_wcrtomb
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
</UL>
<BR>[Called By]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_lcs_common
</UL>

<P><STRONG><a name="[56]"></a>_printf_longlong_dec</STRONG> (Thumb, 108 bytes, Stack size 24 bytes, _printf_longlong_dec.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = _printf_longlong_dec &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ll_udiv10
</UL>
<BR>[Called By]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_llu
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_lld
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_lli
</UL>

<P><STRONG><a name="[97]"></a>_printf_longlong_oct</STRONG> (Thumb, 68 bytes, Stack size 8 bytes, _printf_oct_int_ll.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = _printf_longlong_oct &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
</UL>
<BR>[Called By]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_ll_oct
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_oct
</UL>

<P><STRONG><a name="[52]"></a>_printf_int_oct</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, _printf_oct_int_ll.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = _printf_int_oct &rArr; _printf_longlong_oct &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_oct
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_truncate_unsigned
</UL>
<BR>[Called By]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_o
</UL>

<P><STRONG><a name="[5a]"></a>_printf_ll_oct</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, _printf_oct_int_ll.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = _printf_ll_oct &rArr; _printf_longlong_oct &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_oct
</UL>
<BR>[Called By]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_llo
</UL>

<P><STRONG><a name="[98]"></a>_printf_longlong_hex</STRONG> (Thumb, 86 bytes, Stack size 16 bytes, _printf_hex_int_ll_ptr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = _printf_longlong_hex &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
</UL>
<BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_hex_ptr
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_ll_hex
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_hex
</UL>

<P><STRONG><a name="[54]"></a>_printf_int_hex</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, _printf_hex_int_ll_ptr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = _printf_int_hex &rArr; _printf_longlong_hex &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_hex
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_truncate_unsigned
</UL>
<BR>[Called By]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_x
</UL>

<P><STRONG><a name="[5c]"></a>_printf_ll_hex</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, _printf_hex_int_ll_ptr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = _printf_ll_hex &rArr; _printf_longlong_hex &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_hex
</UL>
<BR>[Called By]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_llx
</UL>

<P><STRONG><a name="[46]"></a>_printf_hex_ptr</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, _printf_hex_int_ll_ptr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = _printf_hex_ptr &rArr; _printf_longlong_hex &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_hex
</UL>
<BR>[Called By]<UL><LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_p
</UL>

<P><STRONG><a name="[92]"></a>__printf</STRONG> (Thumb, 388 bytes, Stack size 40 bytes, __printf_flags_ss_wp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_percent
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_is_digit
</UL>
<BR>[Called By]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_common
</UL>

<P><STRONG><a name="[c1]"></a>__aeabi_errno_addr</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, rt_errno_addr_intlibspace.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ftell_internal
</UL>

<P><STRONG><a name="[19c]"></a>__errno$intlibspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rt_errno_addr_intlibspace.o(.text), UNUSED)

<P><STRONG><a name="[19d]"></a>__rt_errno_addr$intlibspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rt_errno_addr_intlibspace.o(.text), UNUSED)

<P><STRONG><a name="[87]"></a>__Heap_ProvideMemory</STRONG> (Thumb, 52 bytes, Stack size 0 bytes, h1_extend.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>
<BR>[Called By]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_init_alloc
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_Full
</UL>

<P><STRONG><a name="[19e]"></a>_maybe_terminate_alloc</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, maybetermalloc1.o(.text), UNUSED)

<P><STRONG><a name="[96]"></a>_ll_udiv10</STRONG> (Thumb, 138 bytes, Stack size 12 bytes, lludiv10.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = _ll_udiv10
</UL>
<BR>[Called By]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_dec
</UL>

<P><STRONG><a name="[91]"></a>_printf_int_common</STRONG> (Thumb, 178 bytes, Stack size 32 bytes, _printf_intcommon.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
</UL>
<BR>[Called By]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_hex
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_oct
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_dec
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec
</UL>

<P><STRONG><a name="[a0]"></a>_printf_fp_dec_real</STRONG> (Thumb, 620 bytes, Stack size 104 bytes, _printf_fp_dec.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 324<LI>Call Chain = _printf_fp_dec_real &rArr; _fp_digits &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_fpclassify
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_infnan
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_locale
</UL>
<BR>[Called By]<UL><LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec
</UL>

<P><STRONG><a name="[a3]"></a>_printf_fp_hex_real</STRONG> (Thumb, 756 bytes, Stack size 72 bytes, _printf_fp_hex.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = _printf_fp_hex_real &rArr; _printf_fp_infnan &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_fpclassify
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_infnan
</UL>
<BR>[Called By]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_hex
</UL>

<P><STRONG><a name="[a4]"></a>_printf_cs_common</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, _printf_char.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _printf_cs_common &rArr; _printf_str &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_str
</UL>
<BR>[Called By]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_string
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char
</UL>

<P><STRONG><a name="[5e]"></a>_printf_char</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, _printf_char.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _printf_char &rArr; _printf_cs_common &rArr; _printf_str &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_cs_common
</UL>
<BR>[Called By]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_c
</UL>

<P><STRONG><a name="[60]"></a>_printf_string</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, _printf_char.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _printf_string &rArr; _printf_cs_common &rArr; _printf_str &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_cs_common
</UL>
<BR>[Called By]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_s
</UL>

<P><STRONG><a name="[a5]"></a>_printf_lcs_common</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, _printf_wchar.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = _printf_lcs_common &rArr; _printf_wctomb &rArr; _wcrtomb
</UL>
<BR>[Calls]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_wctomb
</UL>
<BR>[Called By]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_wstring
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_wchar
</UL>

<P><STRONG><a name="[62]"></a>_printf_wchar</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, _printf_wchar.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = _printf_wchar &rArr; _printf_lcs_common &rArr; _printf_wctomb &rArr; _wcrtomb
</UL>
<BR>[Calls]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_lcs_common
</UL>
<BR>[Called By]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_lc
</UL>

<P><STRONG><a name="[64]"></a>_printf_wstring</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, _printf_wchar.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = _printf_wstring &rArr; _printf_lcs_common &rArr; _printf_wctomb &rArr; _wcrtomb
</UL>
<BR>[Calls]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_lcs_common
</UL>
<BR>[Called By]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_ls
</UL>

<P><STRONG><a name="[93]"></a>ferror</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, ferror.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_file
</UL>

<P><STRONG><a name="[6f]"></a>_initio</STRONG> (Thumb, 210 bytes, Stack size 8 bytes, initio.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 332 + Unknown Stack Size
<LI>Call Chain = _initio &rArr; freopen &rArr; _fclose_internal &rArr; _fflush &rArr; _writebuf &rArr; _sys_write &rArr; stdout_putchar &rArr; EventRecordData &rArr; EventRecordItem &rArr; UnlockRecord
</UL>
<BR>[Calls]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTRED
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;freopen
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setvbuf
</UL>
<BR>[Called By]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init_stdio_2
</UL>

<P><STRONG><a name="[72]"></a>_terminateio</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, initio.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 316 + Unknown Stack Size
<LI>Call Chain = _terminateio &rArr; _fclose_internal &rArr; _fflush &rArr; _writebuf &rArr; _sys_write &rArr; stdout_putchar &rArr; EventRecordData &rArr; EventRecordItem &rArr; UnlockRecord
</UL>
<BR>[Calls]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fclose_internal
</UL>
<BR>[Called By]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_shutdown_stdio_2
</UL>

<P><STRONG><a name="[ab]"></a>_c16rtomb</STRONG> (Thumb, 72 bytes, Stack size 24 bytes, _c16rtomb.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ctype_table
</UL>

<P><STRONG><a name="[95]"></a>_wcrtomb</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, _c16rtomb.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = _wcrtomb
</UL>
<BR>[Called By]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_wctomb
</UL>

<P><STRONG><a name="[89]"></a>__rt_SIGRTMEM</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, defsig_rtmem_outer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = __rt_SIGRTMEM &rArr; __rt_SIGRTMEM_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTMEM_inner
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sig_exit
</UL>
<BR>[Called By]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_init_alloc
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_Broken
</UL>

<P><STRONG><a name="[19f]"></a>__I$use$semihosting</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, use_no_semi.o(.text), UNUSED)

<P><STRONG><a name="[1a0]"></a>__use_no_semihosting_swi</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, use_no_semi.o(.text), UNUSED)

<P><STRONG><a name="[ac]"></a>__rt_ctype_table</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, rt_ctype_table.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_locale
</UL>
<BR>[Called By]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_c16rtomb
</UL>

<P><STRONG><a name="[1a1]"></a>__semihosting_library_function</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, indicate_semi.o(.text), UNUSED)

<P><STRONG><a name="[6a]"></a>__rt_locale</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, rt_locale_intlibspace.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec_real
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init_lc_common
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ctype_table
</UL>

<P><STRONG><a name="[a2]"></a>_printf_fp_infnan</STRONG> (Thumb, 112 bytes, Stack size 24 bytes, _printf_fp_infnan.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _printf_fp_infnan &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
</UL>
<BR>[Called By]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_hex_real
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec_real
</UL>

<P><STRONG><a name="[9c]"></a>_btod_etento</STRONG> (Thumb, 224 bytes, Stack size 72 bytes, bigflt0.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 124<LI>Call Chain = _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_emul
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_ediv
</UL>
<BR>[Called By]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[af]"></a>__flsbuf</STRONG> (Thumb, 482 bytes, Stack size 40 bytes, flsbuf.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_flen
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_istty
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_deferredlazyseek
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_writebuf
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_seterr
</UL>

<P><STRONG><a name="[167]"></a>__flsbuf_byte</STRONG> (Thumb, 0 bytes, Stack size 40 bytes, flsbuf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = __flsbuf_byte
</UL>
<BR>[Called By]<UL><LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fputc
</UL>

<P><STRONG><a name="[1a2]"></a>__flsbuf_wide</STRONG> (Thumb, 0 bytes, Stack size 40 bytes, flsbuf.o(.text), UNUSED)

<P><STRONG><a name="[a9]"></a>setvbuf</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, setvbuf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = setvbuf
</UL>
<BR>[Called By]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_initio
</UL>

<P><STRONG><a name="[a7]"></a>freopen</STRONG> (Thumb, 160 bytes, Stack size 24 bytes, fopen.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 324 + Unknown Stack Size
<LI>Call Chain = freopen &rArr; _fclose_internal &rArr; _fflush &rArr; _writebuf &rArr; _sys_write &rArr; stdout_putchar &rArr; EventRecordData &rArr; EventRecordItem &rArr; UnlockRecord
</UL>
<BR>[Calls]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_open
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fseek
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fclose_internal
</UL>
<BR>[Called By]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_initio
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fopen
</UL>

<P><STRONG><a name="[b7]"></a>fopen</STRONG> (Thumb, 74 bytes, Stack size 24 bytes, fopen.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;freopen
</UL>

<P><STRONG><a name="[aa]"></a>_fclose_internal</STRONG> (Thumb, 76 bytes, Stack size 32 bytes, fclose.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 300 + Unknown Stack Size
<LI>Call Chain = _fclose_internal &rArr; _fflush &rArr; _writebuf &rArr; _sys_write &rArr; stdout_putchar &rArr; EventRecordData &rArr; EventRecordItem &rArr; UnlockRecord
</UL>
<BR>[Calls]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_close
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fflush
</UL>
<BR>[Called By]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_terminateio
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;freopen
</UL>

<P><STRONG><a name="[1a3]"></a>fclose</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, fclose.o(.text), UNUSED)

<P><STRONG><a name="[77]"></a>exit</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, exit.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = exit
</UL>
<BR>[Calls]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit
</UL>
<BR>[Called By]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_main
</UL>

<P><STRONG><a name="[ae]"></a>__sig_exit</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, defsig_exit.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_exit
</UL>
<BR>[Called By]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTMEM
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTRED
</UL>

<P><STRONG><a name="[a8]"></a>__rt_SIGRTRED</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, defsig_rtred_outer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = __rt_SIGRTRED &rArr; __rt_SIGRTRED_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTRED_inner
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sig_exit
</UL>
<BR>[Called By]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_initio
</UL>

<P><STRONG><a name="[ad]"></a>__rt_SIGRTMEM_inner</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, defsig_rtmem_inner.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __rt_SIGRTMEM_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__default_signal_display
</UL>
<BR>[Called By]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTMEM
</UL>

<P><STRONG><a name="[7b]"></a>_sys_exit</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, sys_exit.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit_exit
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sig_exit
</UL>

<P><STRONG><a name="[b6]"></a>_fseek</STRONG> (Thumb, 242 bytes, Stack size 24 bytes, fseek.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = _fseek &rArr; _sys_flen
</UL>
<BR>[Calls]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_flen
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_istty
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ftell_internal
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_seterr
</UL>
<BR>[Called By]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;freopen
</UL>

<P><STRONG><a name="[1a4]"></a>fseek</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, fseek.o(.text), UNUSED)

<P><STRONG><a name="[b1]"></a>_seterr</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stdio.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_writebuf
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fseek
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__flsbuf
</UL>

<P><STRONG><a name="[b4]"></a>_writebuf</STRONG> (Thumb, 108 bytes, Stack size 48 bytes, stdio.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 252<LI>Call Chain = _writebuf &rArr; _sys_write &rArr; stdout_putchar &rArr; EventRecordData &rArr; EventRecordItem &rArr; UnlockRecord
</UL>
<BR>[Calls]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_seek
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_write
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_seterr
</UL>
<BR>[Called By]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fflush
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__flsbuf
</UL>

<P><STRONG><a name="[b8]"></a>_fflush</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, stdio.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 268<LI>Call Chain = _fflush &rArr; _writebuf &rArr; _sys_write &rArr; stdout_putchar &rArr; EventRecordData &rArr; EventRecordItem &rArr; UnlockRecord
</UL>
<BR>[Calls]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_writebuf
</UL>
<BR>[Called By]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_deferredlazyseek
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fclose_internal
</UL>

<P><STRONG><a name="[b0]"></a>_deferredlazyseek</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, stdio.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fflush
</UL>
<BR>[Called By]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__flsbuf
</UL>

<P><STRONG><a name="[bc]"></a>__default_signal_display</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, defsig_general.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ttywrch
</UL>
<BR>[Called By]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTRED_inner
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTMEM_inner
</UL>

<P><STRONG><a name="[bb]"></a>__rt_SIGRTRED_inner</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, defsig_rtred_inner.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __rt_SIGRTRED_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__default_signal_display
</UL>
<BR>[Called By]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTRED
</UL>

<P><STRONG><a name="[c0]"></a>_ttywrch</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, sys_wrch.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _ttywrch
</UL>
<BR>[Called By]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__default_signal_display
</UL>

<P><STRONG><a name="[bd]"></a>_ftell_internal</STRONG> (Thumb, 66 bytes, Stack size 8 bytes, ftell.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _ftell_internal
</UL>
<BR>[Calls]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fseek
</UL>

<P><STRONG><a name="[1a5]"></a>ftell</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, ftell.o(.text), UNUSED)

<P><STRONG><a name="[35]"></a>ARM_2D_A1_FONT_GET_CHAR_DESCRIPTOR_HANDLER</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, lcd_printf.o(.text.ARM_2D_A1_FONT_GET_CHAR_DESCRIPTOR_HANDLER))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ARM_2D_A1_FONT_GET_CHAR_DESCRIPTOR_HANDLER
</UL>
<BR>[Address Reference Count : 1]<UL><LI> glcd_fonts.o(.rodata.ARM_2D_FONT_6x8)
</UL>
<P><STRONG><a name="[c2]"></a>Disp0_DrawBitmap</STRONG> (Thumb, 58 bytes, Stack size 24 bytes, main.o(.text.Disp0_DrawBitmap))
<BR><BR>[Stack]<UL><LI>Max Depth = 124<LI>Call Chain = Disp0_DrawBitmap &rArr; GLCD_DrawBitmap &rArr; GLCD_SetWindow &rArr; wr_reg &rArr; wr_dat &rArr; spi_tran
</UL>
<BR>[Calls]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GLCD_DrawBitmap
</UL>
<BR>[Called By]<UL><LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__glcd0_pfb_render_handler
</UL>

<P><STRONG><a name="[c9]"></a>EventRecordData</STRONG> (Thumb, 388 bytes, Stack size 56 bytes, eventrecorder.o(.text.EventRecordData))
<BR><BR>[Stack]<UL><LI>Max Depth = 140<LI>Call Chain = EventRecordData &rArr; EventRecordItem &rArr; UnlockRecord
</UL>
<BR>[Calls]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetContext
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventCheckFilter
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventRecordItem
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventGetTS
</UL>
<BR>[Called By]<UL><LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stdout_putchar
</UL>

<P><STRONG><a name="[d8]"></a>EventRecorderEnable</STRONG> (Thumb, 146 bytes, Stack size 28 bytes, eventrecorder.o(.text.EventRecorderEnable))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = EventRecorderEnable
</UL>
<BR>[Called By]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventRecorderInitialize
</UL>

<P><STRONG><a name="[d3]"></a>EventRecorderInitialize</STRONG> (Thumb, 498 bytes, Stack size 48 bytes, eventrecorder.o(.text.EventRecorderInitialize))
<BR><BR>[Stack]<UL><LI>Max Depth = 156 + Unknown Stack Size
<LI>Call Chain = EventRecorderInitialize &rArr; EventRecorderStart &rArr; EventRecordItem &rArr; UnlockRecord
</UL>
<BR>[Calls]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr8
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventRecorderStart
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventRecorderEnable
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventRecorderTimerGetFreq
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventRecorderTimerSetup
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventRecordItem
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventGetTS
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crc16_ccitt
</UL>
<BR>[Called By]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[d9]"></a>EventRecorderStart</STRONG> (Thumb, 74 bytes, Stack size 24 bytes, eventrecorder.o(.text.EventRecorderStart))
<BR><BR>[Stack]<UL><LI>Max Depth = 108<LI>Call Chain = EventRecorderStart &rArr; EventRecordItem &rArr; UnlockRecord
</UL>
<BR>[Calls]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventRecordItem
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventGetTS
</UL>
<BR>[Called By]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventRecorderInitialize
</UL>

<P><STRONG><a name="[c5]"></a>EventRecorderTimerGetCount</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, perf_counter.o(.text.EventRecorderTimerGetCount))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = EventRecorderTimerGetCount &rArr; get_system_ticks &rArr; check_systick
</UL>
<BR>[Calls]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_system_ticks
</UL>
<BR>[Called By]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventGetTS
</UL>

<P><STRONG><a name="[d7]"></a>EventRecorderTimerGetFreq</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, perf_counter.o(.text.EventRecorderTimerGetFreq))
<BR><BR>[Called By]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventRecorderInitialize
</UL>

<P><STRONG><a name="[d6]"></a>EventRecorderTimerSetup</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, perf_counter.o(.text.EventRecorderTimerSetup))
<BR><BR>[Called By]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventRecorderInitialize
</UL>

<P><STRONG><a name="[db]"></a>GLCD_ClearScreen</STRONG> (Thumb, 80 bytes, Stack size 16 bytes, glcd_v2m-mps2.o(.text.GLCD_ClearScreen))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = GLCD_ClearScreen &rArr; GLCD_SetWindow &rArr; wr_reg &rArr; wr_dat &rArr; spi_tran
</UL>
<BR>[Calls]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wr_dat_stop
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wr_dat_only
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wr_dat_start
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GLCD_SetWindow
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wr_cmd
</UL>
<BR>[Called By]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[c3]"></a>GLCD_DrawBitmap</STRONG> (Thumb, 88 bytes, Stack size 32 bytes, glcd_v2m-mps2.o(.text.GLCD_DrawBitmap))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = GLCD_DrawBitmap &rArr; GLCD_SetWindow &rArr; wr_reg &rArr; wr_dat &rArr; spi_tran
</UL>
<BR>[Calls]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wr_dat_stop
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wr_dat_only
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wr_dat_start
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GLCD_SetWindow
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wr_cmd
</UL>
<BR>[Called By]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Disp0_DrawBitmap
</UL>

<P><STRONG><a name="[e1]"></a>GLCD_DrawHLine</STRONG> (Thumb, 70 bytes, Stack size 24 bytes, glcd_v2m-mps2.o(.text.GLCD_DrawHLine))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = GLCD_DrawHLine &rArr; GLCD_SetWindow &rArr; wr_reg &rArr; wr_dat &rArr; spi_tran
</UL>
<BR>[Calls]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wr_dat_stop
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wr_dat_only
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wr_dat_start
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GLCD_SetWindow
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wr_cmd
</UL>
<BR>[Called By]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GLCD_DrawRectangle
</UL>

<P><STRONG><a name="[e2]"></a>GLCD_DrawRectangle</STRONG> (Thumb, 66 bytes, Stack size 24 bytes, glcd_v2m-mps2.o(.text.GLCD_DrawRectangle))
<BR><BR>[Stack]<UL><LI>Max Depth = 116<LI>Call Chain = GLCD_DrawRectangle &rArr; GLCD_DrawVLine &rArr; GLCD_SetWindow &rArr; wr_reg &rArr; wr_dat &rArr; spi_tran
</UL>
<BR>[Calls]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GLCD_DrawVLine
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GLCD_DrawHLine
</UL>
<BR>[Called By]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[e3]"></a>GLCD_DrawVLine</STRONG> (Thumb, 70 bytes, Stack size 24 bytes, glcd_v2m-mps2.o(.text.GLCD_DrawVLine))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = GLCD_DrawVLine &rArr; GLCD_SetWindow &rArr; wr_reg &rArr; wr_dat &rArr; spi_tran
</UL>
<BR>[Calls]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wr_dat_stop
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wr_dat_only
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wr_dat_start
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GLCD_SetWindow
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wr_cmd
</UL>
<BR>[Called By]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GLCD_DrawRectangle
</UL>

<P><STRONG><a name="[e4]"></a>GLCD_Initialize</STRONG> (Thumb, 718 bytes, Stack size 120 bytes, glcd_v2m-mps2.o(.text.GLCD_Initialize))
<BR><BR>[Stack]<UL><LI>Max Depth = 156<LI>Call Chain = GLCD_Initialize &rArr; wr_reg &rArr; wr_dat &rArr; spi_tran
</UL>
<BR>[Calls]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wr_reg
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
</UL>
<BR>[Called By]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[15f]"></a>GLCD_SetBackgroundColor</STRONG> (Thumb, 22 bytes, Stack size 4 bytes, glcd_v2m-mps2.o(.text.GLCD_SetBackgroundColor))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = GLCD_SetBackgroundColor
</UL>
<BR>[Called By]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[15e]"></a>GLCD_SetForegroundColor</STRONG> (Thumb, 22 bytes, Stack size 4 bytes, glcd_v2m-mps2.o(.text.GLCD_SetForegroundColor))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = GLCD_SetForegroundColor
</UL>
<BR>[Called By]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[2d]"></a>$Super$$SysTick_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, main.o(.text.SysTick_Handler))
<BR>[Address Reference Count : 1]<UL><LI> systick_wrapper_ual.o(.text)
</UL>
<P><STRONG><a name="[2a]"></a>SystemInit</STRONG> (Thumb, 54 bytes, Stack size 0 bytes, system_cmsdk_cm4.o(.text.SystemInit))
<BR>[Address Reference Count : 1]<UL><LI> startup_cmsdk_cm4.o(.text)
</UL>
<P><STRONG><a name="[ed]"></a>__arm_2d_helper_is_time_out</STRONG> (Thumb, 130 bytes, Stack size 40 bytes, arm_2d_helper.o(.text.__arm_2d_helper_is_time_out))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = __arm_2d_helper_is_time_out &rArr; arm_2d_helper_get_system_timestamp &rArr; get_system_ticks &rArr; check_systick
</UL>
<BR>[Calls]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_2d_helper_get_system_timestamp
</UL>
<BR>[Called By]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;busy_wheel2_show
</UL>

<P><STRONG><a name="[f1]"></a>__arm_2d_helper_perf_counter_start</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, arm_2d_helper_pfb.o(.text.__arm_2d_helper_perf_counter_start))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = __arm_2d_helper_perf_counter_start &rArr; arm_2d_helper_get_system_timestamp &rArr; get_system_ticks &rArr; check_systick
</UL>
<BR>[Calls]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_2d_helper_get_system_timestamp
</UL>
<BR>[Called By]<UL><LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_2d_helper_pfb_task
</UL>

<P><STRONG><a name="[f2]"></a>__arm_2d_helper_perf_counter_stop</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, arm_2d_helper_pfb.o(.text.__arm_2d_helper_perf_counter_stop))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = __arm_2d_helper_perf_counter_stop &rArr; arm_2d_helper_get_system_timestamp &rArr; get_system_ticks &rArr; check_systick
</UL>
<BR>[Calls]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_2d_helper_get_system_timestamp
</UL>
<BR>[Called By]<UL><LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_2d_helper_pfb_task
</UL>

<P><STRONG><a name="[f7]"></a>__arm_2d_helper_pfb_free</STRONG> (Thumb, 98 bytes, Stack size 32 bytes, arm_2d_helper_pfb.o(.text.__arm_2d_helper_pfb_free))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __arm_2d_helper_pfb_free
</UL>
<BR>[Called By]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__arm_2d_helper_pfb_report_rendering_complete
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_2d_helper_pfb_init
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__arm_2d_helper_pfb_drawing_iteration_begin
</UL>

<P><STRONG><a name="[f4]"></a>__arm_2d_helper_pfb_new</STRONG> (Thumb, 114 bytes, Stack size 32 bytes, arm_2d_helper_pfb.o(.text.__arm_2d_helper_pfb_new))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __arm_2d_helper_pfb_new
</UL>
<BR>[Called By]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__arm_2d_helper_pfb_drawing_iteration_begin
</UL>

<P><STRONG><a name="[fc]"></a>__arm_2d_helper_pfb_report_rendering_complete</STRONG> (Thumb, 152 bytes, Stack size 48 bytes, arm_2d_helper_pfb.o(.text.__arm_2d_helper_pfb_report_rendering_complete))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = __arm_2d_helper_pfb_report_rendering_complete &rArr; arm_2d_helper_pfb_flush
</UL>
<BR>[Calls]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_2d_helper_pfb_flush
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__arm_2d_helper_pfb_free
</UL>
<BR>[Called By]<UL><LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__glcd0_pfb_render_handler
</UL>

<P><STRONG><a name="[127]"></a>__arm_2d_impl_rgb16_colour_filling</STRONG> (Thumb, 102 bytes, Stack size 24 bytes, arm_2d_draw.o(.text.__arm_2d_impl_rgb16_colour_filling))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __arm_2d_impl_rgb16_colour_filling
</UL>
<BR>[Called By]<UL><LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__arm_2d_rgb565_sw_colour_filling_with_opacity
<LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__arm_2d_rgb16_sw_colour_filling
</UL>

<P><STRONG><a name="[fd]"></a>__arm_2d_impl_rgb16_draw_pattern</STRONG> (Thumb, 320 bytes, Stack size 64 bytes, arm_2d_draw.o(.text.__arm_2d_impl_rgb16_draw_pattern))
<BR><BR>[Stack]<UL><LI>Max Depth = 124<LI>Call Chain = __arm_2d_impl_rgb16_draw_pattern &rArr; __arm_2d_impl_rgb16_draw_pattern_bg_fg
</UL>
<BR>[Calls]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__arm_2d_impl_rgb16_draw_pattern_bg_comp
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__arm_2d_impl_rgb16_draw_pattern_bg_fg
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__arm_2d_impl_rgb16_draw_pattern_bg_only
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__arm_2d_impl_rgb16_draw_pattern_no_bg_comp
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__arm_2d_impl_rgb16_draw_pattern_fg_only
</UL>
<BR>[Called By]<UL><LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__arm_2d_rgb16_sw_draw_pattern
</UL>

<P><STRONG><a name="[102]"></a>__arm_2d_impl_rgb16_draw_pattern_bg_comp</STRONG> (Thumb, 250 bytes, Stack size 48 bytes, arm_2d_draw.o(.text.__arm_2d_impl_rgb16_draw_pattern_bg_comp))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = __arm_2d_impl_rgb16_draw_pattern_bg_comp
</UL>
<BR>[Called By]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__arm_2d_impl_rgb16_draw_pattern
</UL>

<P><STRONG><a name="[ff]"></a>__arm_2d_impl_rgb16_draw_pattern_bg_fg</STRONG> (Thumb, 258 bytes, Stack size 60 bytes, arm_2d_draw.o(.text.__arm_2d_impl_rgb16_draw_pattern_bg_fg))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = __arm_2d_impl_rgb16_draw_pattern_bg_fg
</UL>
<BR>[Called By]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__arm_2d_impl_rgb16_draw_pattern
</UL>

<P><STRONG><a name="[100]"></a>__arm_2d_impl_rgb16_draw_pattern_bg_only</STRONG> (Thumb, 240 bytes, Stack size 48 bytes, arm_2d_draw.o(.text.__arm_2d_impl_rgb16_draw_pattern_bg_only))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = __arm_2d_impl_rgb16_draw_pattern_bg_only
</UL>
<BR>[Called By]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__arm_2d_impl_rgb16_draw_pattern
</UL>

<P><STRONG><a name="[fe]"></a>__arm_2d_impl_rgb16_draw_pattern_fg_only</STRONG> (Thumb, 234 bytes, Stack size 48 bytes, arm_2d_draw.o(.text.__arm_2d_impl_rgb16_draw_pattern_fg_only))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = __arm_2d_impl_rgb16_draw_pattern_fg_only
</UL>
<BR>[Called By]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__arm_2d_impl_rgb16_draw_pattern
</UL>

<P><STRONG><a name="[101]"></a>__arm_2d_impl_rgb16_draw_pattern_no_bg_comp</STRONG> (Thumb, 230 bytes, Stack size 48 bytes, arm_2d_draw.o(.text.__arm_2d_impl_rgb16_draw_pattern_no_bg_comp))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = __arm_2d_impl_rgb16_draw_pattern_no_bg_comp
</UL>
<BR>[Called By]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__arm_2d_impl_rgb16_draw_pattern
</UL>

<P><STRONG><a name="[103]"></a>__arm_2d_impl_rgb565_colour_filling_channel_mask</STRONG> (Thumb, 288 bytes, Stack size 72 bytes, arm_2d_alpha_blending.o(.text.__arm_2d_impl_rgb565_colour_filling_channel_mask))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = __arm_2d_impl_rgb565_colour_filling_channel_mask &rArr; __arm_2d_rgb565_unpack
</UL>
<BR>[Calls]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__arm_2d_rgb565_pack
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__arm_2d_rgb565_unpack
</UL>
<BR>[Called By]<UL><LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__arm_2d_rgb565_sw_colour_filling_with_mask_and_opacity
</UL>

<P><STRONG><a name="[106]"></a>__arm_2d_impl_rgb565_colour_filling_channel_mask_opacity</STRONG> (Thumb, 302 bytes, Stack size 72 bytes, arm_2d_alpha_blending.o(.text.__arm_2d_impl_rgb565_colour_filling_channel_mask_opacity))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = __arm_2d_impl_rgb565_colour_filling_channel_mask_opacity &rArr; __arm_2d_rgb565_unpack
</UL>
<BR>[Calls]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__arm_2d_rgb565_pack
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__arm_2d_rgb565_unpack
</UL>
<BR>[Called By]<UL><LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__arm_2d_rgb565_sw_colour_filling_with_mask_and_opacity
</UL>

<P><STRONG><a name="[107]"></a>__arm_2d_impl_rgb565_colour_filling_mask</STRONG> (Thumb, 286 bytes, Stack size 72 bytes, arm_2d_alpha_blending.o(.text.__arm_2d_impl_rgb565_colour_filling_mask))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = __arm_2d_impl_rgb565_colour_filling_mask &rArr; __arm_2d_rgb565_unpack
</UL>
<BR>[Calls]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__arm_2d_rgb565_pack
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__arm_2d_rgb565_unpack
</UL>
<BR>[Called By]<UL><LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__arm_2d_rgb565_sw_colour_filling_with_mask_and_opacity
</UL>

<P><STRONG><a name="[108]"></a>__arm_2d_impl_rgb565_colour_filling_mask_opacity</STRONG> (Thumb, 300 bytes, Stack size 72 bytes, arm_2d_alpha_blending.o(.text.__arm_2d_impl_rgb565_colour_filling_mask_opacity))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = __arm_2d_impl_rgb565_colour_filling_mask_opacity &rArr; __arm_2d_rgb565_unpack
</UL>
<BR>[Calls]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__arm_2d_rgb565_pack
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__arm_2d_rgb565_unpack
</UL>
<BR>[Called By]<UL><LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__arm_2d_rgb565_sw_colour_filling_with_mask_and_opacity
</UL>

<P><STRONG><a name="[109]"></a>__arm_2d_impl_rgb565_colour_filling_with_opacity</STRONG> (Thumb, 252 bytes, Stack size 80 bytes, arm_2d_alpha_blending.o(.text.__arm_2d_impl_rgb565_colour_filling_with_opacity))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = __arm_2d_impl_rgb565_colour_filling_with_opacity &rArr; __arm_2d_rgb565_unpack
</UL>
<BR>[Calls]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__arm_2d_rgb565_pack
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__arm_2d_rgb565_unpack
</UL>
<BR>[Called By]<UL><LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__arm_2d_rgb565_sw_colour_filling_with_opacity
</UL>

<P><STRONG><a name="[10a]"></a>__arm_2d_init</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, arm_2d.o(.text.__arm_2d_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __arm_2d_init
</UL>
<BR>[Calls]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_2d_init
</UL>

<P><STRONG><a name="[10b]"></a>__arm_2d_issue_sub_task_copy</STRONG> (Thumb, 202 bytes, Stack size 168 bytes, arm_2d.o(.text.__arm_2d_issue_sub_task_copy))
<BR><BR>[Stack]<UL><LI>Max Depth = 392<LI>Call Chain = __arm_2d_issue_sub_task_copy &rArr; __arm_2d_sub_task_depose &rArr; __depose_virtual_resource &rArr; __arm_2d_tile_get_root &rArr; __arm_2d_tile_get_1st_derived_child_or_root &rArr; arm_2d_region_intersect
</UL>
<BR>[Calls]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__arm_2d_sub_task_depose
</UL>
<BR>[Called By]<UL><LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__arm_2d_region_calculator
</UL>

<P><STRONG><a name="[10d]"></a>__arm_2d_issue_sub_task_copy_origin</STRONG> (Thumb, 250 bytes, Stack size 168 bytes, arm_2d.o(.text.__arm_2d_issue_sub_task_copy_origin))
<BR><BR>[Stack]<UL><LI>Max Depth = 392<LI>Call Chain = __arm_2d_issue_sub_task_copy_origin &rArr; __arm_2d_sub_task_depose &rArr; __depose_virtual_resource &rArr; __arm_2d_tile_get_root &rArr; __arm_2d_tile_get_1st_derived_child_or_root &rArr; arm_2d_region_intersect
</UL>
<BR>[Calls]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__arm_2d_sub_task_depose
</UL>
<BR>[Called By]<UL><LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__arm_2d_region_calculator
</UL>

<P><STRONG><a name="[10e]"></a>__arm_2d_issue_sub_task_copy_origin_masks</STRONG> (Thumb, 376 bytes, Stack size 176 bytes, arm_2d.o(.text.__arm_2d_issue_sub_task_copy_origin_masks))
<BR><BR>[Stack]<UL><LI>Max Depth = 400<LI>Call Chain = __arm_2d_issue_sub_task_copy_origin_masks &rArr; __arm_2d_sub_task_depose &rArr; __depose_virtual_resource &rArr; __arm_2d_tile_get_root &rArr; __arm_2d_tile_get_1st_derived_child_or_root &rArr; arm_2d_region_intersect
</UL>
<BR>[Calls]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__arm_2d_sub_task_depose
</UL>
<BR>[Called By]<UL><LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__arm_2d_region_calculator
</UL>

<P><STRONG><a name="[10f]"></a>__arm_2d_issue_sub_task_copy_with_mask</STRONG> (Thumb, 336 bytes, Stack size 176 bytes, arm_2d.o(.text.__arm_2d_issue_sub_task_copy_with_mask))
<BR><BR>[Stack]<UL><LI>Max Depth = 400<LI>Call Chain = __arm_2d_issue_sub_task_copy_with_mask &rArr; __arm_2d_sub_task_depose &rArr; __depose_virtual_resource &rArr; __arm_2d_tile_get_root &rArr; __arm_2d_tile_get_1st_derived_child_or_root &rArr; arm_2d_region_intersect
</UL>
<BR>[Calls]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__arm_2d_sub_task_depose
</UL>
<BR>[Called By]<UL><LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__arm_2d_region_calculator
</UL>

<P><STRONG><a name="[110]"></a>__arm_2d_issue_sub_task_fill</STRONG> (Thumb, 194 bytes, Stack size 168 bytes, arm_2d.o(.text.__arm_2d_issue_sub_task_fill))
<BR><BR>[Stack]<UL><LI>Max Depth = 392<LI>Call Chain = __arm_2d_issue_sub_task_fill &rArr; __arm_2d_sub_task_depose &rArr; __depose_virtual_resource &rArr; __arm_2d_tile_get_root &rArr; __arm_2d_tile_get_1st_derived_child_or_root &rArr; arm_2d_region_intersect
</UL>
<BR>[Calls]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__arm_2d_sub_task_depose
</UL>
<BR>[Called By]<UL><LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__arm_2d_region_calculator
</UL>

<P><STRONG><a name="[111]"></a>__arm_2d_issue_sub_task_fill_origin</STRONG> (Thumb, 240 bytes, Stack size 168 bytes, arm_2d.o(.text.__arm_2d_issue_sub_task_fill_origin))
<BR><BR>[Stack]<UL><LI>Max Depth = 392<LI>Call Chain = __arm_2d_issue_sub_task_fill_origin &rArr; __arm_2d_sub_task_depose &rArr; __depose_virtual_resource &rArr; __arm_2d_tile_get_root &rArr; __arm_2d_tile_get_1st_derived_child_or_root &rArr; arm_2d_region_intersect
</UL>
<BR>[Calls]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__arm_2d_sub_task_depose
</UL>
<BR>[Called By]<UL><LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__arm_2d_region_calculator
</UL>

<P><STRONG><a name="[112]"></a>__arm_2d_issue_sub_task_fill_with_mask</STRONG> (Thumb, 326 bytes, Stack size 176 bytes, arm_2d.o(.text.__arm_2d_issue_sub_task_fill_with_mask))
<BR><BR>[Stack]<UL><LI>Max Depth = 400<LI>Call Chain = __arm_2d_issue_sub_task_fill_with_mask &rArr; __arm_2d_sub_task_depose &rArr; __depose_virtual_resource &rArr; __arm_2d_tile_get_root &rArr; __arm_2d_tile_get_1st_derived_child_or_root &rArr; arm_2d_region_intersect
</UL>
<BR>[Calls]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__arm_2d_sub_task_depose
</UL>
<BR>[Called By]<UL><LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__arm_2d_region_calculator
</UL>

<P><STRONG><a name="[113]"></a>__arm_2d_issue_sub_task_tile_process</STRONG> (Thumb, 128 bytes, Stack size 168 bytes, arm_2d.o(.text.__arm_2d_issue_sub_task_tile_process))
<BR><BR>[Stack]<UL><LI>Max Depth = 392 + Unknown Stack Size
<LI>Call Chain = __arm_2d_issue_sub_task_tile_process &rArr; __arm_2d_sub_task_depose &rArr; __depose_virtual_resource &rArr; __arm_2d_tile_get_root &rArr; __arm_2d_tile_get_1st_derived_child_or_root &rArr; arm_2d_region_intersect
</UL>
<BR>[Calls]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__arm_2d_sub_task_depose
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__arm_2d_tile_process
</UL>

<P><STRONG><a name="[14a]"></a>__arm_2d_op_acquire</STRONG> (Thumb, 142 bytes, Stack size 36 bytes, arm_2d.o(.text.__arm_2d_op_acquire))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = __arm_2d_op_acquire
</UL>
<BR>[Called By]<UL><LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_2dp_rgb565_fill_colour_with_mask_and_opacity
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_2dp_rgb16_fill_colour
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_2dp_rgb565_fill_colour_with_opacity
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_2dp_rgb16_draw_pattern
</UL>

<P><STRONG><a name="[117]"></a>__arm_2d_op_depose</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, arm_2d.o(.text.__arm_2d_op_depose))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __arm_2d_op_depose
</UL>
<BR>[Called By]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__arm_2d_op_frontend_on_leave
</UL>

<P><STRONG><a name="[11c]"></a>__arm_2d_op_ensure_resource</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, arm_2d.o(.text.__arm_2d_op_ensure_resource))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __arm_2d_op_ensure_resource
</UL>
<BR>[Called By]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__arm_2d_op_frontend_region_process
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__arm_2d_op_frontend_region_process_with_src
</UL>

<P><STRONG><a name="[114]"></a>__arm_2d_op_frontend</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, arm_2d.o(.text.__arm_2d_op_frontend))
<BR><BR>[Stack]<UL><LI>Max Depth = 1048 + Unknown Stack Size
<LI>Call Chain = __arm_2d_op_frontend &rArr; __arm_2d_op_frontend_op_decoder &rArr; __arm_2d_op_frontend_region_process_with_src &rArr; __tile_clipped_pave &rArr; __arm_2d_region_calculator &rArr; __arm_2d_issue_sub_task_copy_origin_masks &rArr; __arm_2d_sub_task_depose &rArr; __depose_virtual_resource &rArr; __arm_2d_tile_get_root &rArr; __arm_2d_tile_get_1st_derived_child_or_root &rArr; arm_2d_region_intersect
</UL>
<BR>[Calls]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__arm_2d_op_frontend_op_decoder
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__arm_2d_op_frontend_on_leave
</UL>
<BR>[Called By]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__arm_2d_op_invoke
</UL>

<P><STRONG><a name="[116]"></a>__arm_2d_op_frontend_on_leave</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, arm_2d.o(.text.__arm_2d_op_frontend_on_leave))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __arm_2d_op_frontend_on_leave &rArr; __arm_2d_op_depose
</UL>
<BR>[Calls]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__arm_2d_op_depose
</UL>
<BR>[Called By]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__arm_2d_op_frontend
</UL>

<P><STRONG><a name="[115]"></a>__arm_2d_op_frontend_op_decoder</STRONG> (Thumb, 126 bytes, Stack size 24 bytes, arm_2d.o(.text.__arm_2d_op_frontend_op_decoder))
<BR><BR>[Stack]<UL><LI>Max Depth = 1032 + Unknown Stack Size
<LI>Call Chain = __arm_2d_op_frontend_op_decoder &rArr; __arm_2d_op_frontend_region_process_with_src &rArr; __tile_clipped_pave &rArr; __arm_2d_region_calculator &rArr; __arm_2d_issue_sub_task_copy_origin_masks &rArr; __arm_2d_sub_task_depose &rArr; __depose_virtual_resource &rArr; __arm_2d_tile_get_root &rArr; __arm_2d_tile_get_1st_derived_child_or_root &rArr; arm_2d_region_intersect
</UL>
<BR>[Calls]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__arm_2d_op_frontend_control
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__arm_2d_op_frontend_region_process
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__arm_2d_op_frontend_region_process_with_src
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__arm_2d_op_use_default_frame_buffer
</UL>
<BR>[Called By]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__arm_2d_op_frontend
</UL>

<P><STRONG><a name="[121]"></a>__arm_2d_op_invoke</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, arm_2d.o(.text.__arm_2d_op_invoke))
<BR><BR>[Stack]<UL><LI>Max Depth = 1064 + Unknown Stack Size
<LI>Call Chain = __arm_2d_op_invoke &rArr; __arm_2d_op_frontend &rArr; __arm_2d_op_frontend_op_decoder &rArr; __arm_2d_op_frontend_region_process_with_src &rArr; __tile_clipped_pave &rArr; __arm_2d_region_calculator &rArr; __arm_2d_issue_sub_task_copy_origin_masks &rArr; __arm_2d_sub_task_depose &rArr; __depose_virtual_resource &rArr; __arm_2d_tile_get_root &rArr; __arm_2d_tile_get_1st_derived_child_or_root &rArr; arm_2d_region_intersect
</UL>
<BR>[Calls]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__arm_2d_op_frontend
</UL>
<BR>[Called By]<UL><LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_2dp_rgb565_fill_colour_with_mask_and_opacity
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_2dp_rgb16_fill_colour
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_2dp_rgb565_fill_colour_with_opacity
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_2dp_rgb16_draw_pattern
</UL>

<P><STRONG><a name="[38]"></a>__arm_2d_rgb16_sw_colour_filling</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, arm_2d_draw.o(.text.__arm_2d_rgb16_sw_colour_filling))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = __arm_2d_rgb16_sw_colour_filling &rArr; __arm_2d_impl_rgb16_colour_filling
</UL>
<BR>[Calls]<UL><LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__arm_2d_impl_rgb16_colour_filling
</UL>
<BR>[Address Reference Count : 1]<UL><LI> arm_2d_draw.o(.rodata.LOW_LEVEL_IO__ARM_2D_IO_FILL_COLOUR_RGB16)
</UL>
<P><STRONG><a name="[36]"></a>__arm_2d_rgb16_sw_draw_pattern</STRONG> (Thumb, 146 bytes, Stack size 56 bytes, arm_2d_draw.o(.text.__arm_2d_rgb16_sw_draw_pattern))
<BR><BR>[Stack]<UL><LI>Max Depth = 180<LI>Call Chain = __arm_2d_rgb16_sw_draw_pattern &rArr; __arm_2d_impl_rgb16_draw_pattern &rArr; __arm_2d_impl_rgb16_draw_pattern_bg_fg
</UL>
<BR>[Calls]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__arm_2d_impl_rgb16_draw_pattern
</UL>
<BR>[Address Reference Count : 1]<UL><LI> arm_2d_draw.o(.rodata.LOW_LEVEL_IO__ARM_2D_IO_DRAW_PATTERN_RGB16)
</UL>
<P><STRONG><a name="[37]"></a>__arm_2d_rgb565_sw_colour_filling_with_mask_and_opacity</STRONG> (Thumb, 284 bytes, Stack size 40 bytes, arm_2d_alpha_blending.o(.text.__arm_2d_rgb565_sw_colour_filling_with_mask_and_opacity))
<BR><BR>[Stack]<UL><LI>Max Depth = 124<LI>Call Chain = __arm_2d_rgb565_sw_colour_filling_with_mask_and_opacity &rArr; __arm_2d_impl_rgb565_colour_filling_channel_mask_opacity &rArr; __arm_2d_rgb565_unpack
</UL>
<BR>[Calls]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__arm_2d_impl_rgb565_colour_filling_channel_mask_opacity
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__arm_2d_impl_rgb565_colour_filling_channel_mask
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__arm_2d_impl_rgb565_colour_filling_mask_opacity
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__arm_2d_impl_rgb565_colour_filling_mask
</UL>
<BR>[Address Reference Count : 1]<UL><LI> arm_2d_alpha_blending.o(.rodata.LOW_LEVEL_IO__ARM_2D_IO_FILL_COLOUR_MASK_AND_OPACITY_RGB565)
</UL>
<P><STRONG><a name="[39]"></a>__arm_2d_rgb565_sw_colour_filling_with_opacity</STRONG> (Thumb, 104 bytes, Stack size 24 bytes, arm_2d_alpha_blending.o(.text.__arm_2d_rgb565_sw_colour_filling_with_opacity))
<BR><BR>[Stack]<UL><LI>Max Depth = 116<LI>Call Chain = __arm_2d_rgb565_sw_colour_filling_with_opacity &rArr; __arm_2d_impl_rgb565_colour_filling_with_opacity &rArr; __arm_2d_rgb565_unpack
</UL>
<BR>[Calls]<UL><LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__arm_2d_impl_rgb16_colour_filling
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__arm_2d_impl_rgb565_colour_filling_with_opacity
</UL>
<BR>[Address Reference Count : 1]<UL><LI> arm_2d_alpha_blending.o(.rodata.LOW_LEVEL_IO__ARM_2D_IO_FILL_COLOUR_WITH_OPACITY_RGB565)
</UL>
<P><STRONG><a name="[128]"></a>__arm_2d_scene_player_register_on_draw_navigation_event_handler</STRONG> (Thumb, 92 bytes, Stack size 88 bytes, arm_2d_helper_scene.o(.text.__arm_2d_scene_player_register_on_draw_navigation_event_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 124<LI>Call Chain = __arm_2d_scene_player_register_on_draw_navigation_event_handler &rArr; arm_2d_helper_pfb_update_dependency
</UL>
<BR>[Calls]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_2d_helper_pfb_update_dependency
</UL>
<BR>[Called By]<UL><LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disp_adapter0_init
</UL>

<P><STRONG><a name="[10c]"></a>__arm_2d_sub_task_depose</STRONG> (Thumb, 168 bytes, Stack size 40 bytes, arm_2d.o(.text.__arm_2d_sub_task_depose))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = __arm_2d_sub_task_depose &rArr; __depose_virtual_resource &rArr; __arm_2d_tile_get_root &rArr; __arm_2d_tile_get_1st_derived_child_or_root &rArr; arm_2d_region_intersect
</UL>
<BR>[Calls]<UL><LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__depose_virtual_resource
</UL>
<BR>[Called By]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__arm_2d_issue_sub_task_copy_origin_masks
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__arm_2d_issue_sub_task_copy_origin
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__arm_2d_issue_sub_task_fill_origin
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__arm_2d_issue_sub_task_copy_with_mask
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__arm_2d_issue_sub_task_copy
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__arm_2d_issue_sub_task_fill_with_mask
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__arm_2d_issue_sub_task_fill
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__arm_2d_issue_sub_task_tile_process
</UL>

<P><STRONG><a name="[12b]"></a>__arm_2d_tile_get_1st_derived_child_or_root</STRONG> (Thumb, 370 bytes, Stack size 56 bytes, arm_2d.o(.text.__arm_2d_tile_get_1st_derived_child_or_root))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = __arm_2d_tile_get_1st_derived_child_or_root &rArr; arm_2d_region_intersect
</UL>
<BR>[Calls]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_2d_region_intersect
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_2d_is_root_tile
</UL>
<BR>[Called By]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_2d_tile_get_root
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__arm_2d_tile_get_root
</UL>

<P><STRONG><a name="[12d]"></a>__arm_2d_tile_get_root</STRONG> (Thumb, 38 bytes, Stack size 32 bytes, arm_2d.o(.text.__arm_2d_tile_get_root))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = __arm_2d_tile_get_root &rArr; __arm_2d_tile_get_1st_derived_child_or_root &rArr; arm_2d_region_intersect
</UL>
<BR>[Calls]<UL><LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__arm_2d_tile_get_1st_derived_child_or_root
</UL>
<BR>[Called By]<UL><LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__depose_virtual_resource
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__arm_2d_tile_region_caculator
</UL>

<P><STRONG><a name="[12e]"></a>__arm_2d_valid_mask</STRONG> (Thumb, 188 bytes, Stack size 32 bytes, arm_2d.o(.text.__arm_2d_valid_mask))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = __arm_2d_valid_mask &rArr; arm_2d_tile_get_root &rArr; __arm_2d_tile_get_1st_derived_child_or_root &rArr; arm_2d_region_intersect
</UL>
<BR>[Calls]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_2d_tile_get_root
</UL>
<BR>[Called By]<UL><LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_2dp_rgb565_fill_colour_with_mask_and_opacity
</UL>

<P><STRONG><a name="[33]"></a>__glcd0_pfb_render_handler</STRONG> (Thumb, 70 bytes, Stack size 32 bytes, arm_2d_disp_adapter_0.o(.text.__glcd0_pfb_render_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 156<LI>Call Chain = __glcd0_pfb_render_handler &rArr; Disp0_DrawBitmap &rArr; GLCD_DrawBitmap &rArr; GLCD_SetWindow &rArr; wr_reg &rArr; wr_dat &rArr; spi_tran
</UL>
<BR>[Calls]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__arm_2d_helper_pfb_report_rendering_complete
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Disp0_DrawBitmap
</UL>
<BR>[Address Reference Count : 1]<UL><LI> arm_2d_disp_adapter_0.o(.rodata..L__const.__user_scene_player_init.tCFG)
</UL>
<P><STRONG><a name="[3a]"></a>__perf_counter_init</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, perf_counter.o(.text.__perf_counter_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 132<LI>Call Chain = __perf_counter_init &rArr; init_cycle_counter &rArr; update_perf_counter &rArr; get_system_ticks &rArr; check_systick
</UL>
<BR>[Calls]<UL><LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_cycle_counter
</UL>
<BR>[Address Reference Count : 1]<UL><LI> perf_counter.o(.init_array)
</UL>
<P><STRONG><a name="[15d]"></a>__perf_os_patch_init</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, perf_counter.o(.text.__perf_os_patch_init))
<BR><BR>[Called By]<UL><LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_cycle_counter
</UL>

<P><STRONG><a name="[b9]"></a>_sys_close</STRONG> (Thumb, 74 bytes, Stack size 12 bytes, retarget_io.o(.text._sys_close))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = _sys_close
</UL>
<BR>[Called By]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fclose_internal
</UL>

<P><STRONG><a name="[b2]"></a>_sys_flen</STRONG> (Thumb, 72 bytes, Stack size 12 bytes, retarget_io.o(.text._sys_flen))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = _sys_flen
</UL>
<BR>[Called By]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fseek
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__flsbuf
</UL>

<P><STRONG><a name="[b3]"></a>_sys_istty</STRONG> (Thumb, 72 bytes, Stack size 12 bytes, retarget_io.o(.text._sys_istty))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = _sys_istty
</UL>
<BR>[Called By]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fseek
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__flsbuf
</UL>

<P><STRONG><a name="[b5]"></a>_sys_open</STRONG> (Thumb, 132 bytes, Stack size 24 bytes, retarget_io.o(.text._sys_open))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = _sys_open &rArr; strcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;freopen
</UL>

<P><STRONG><a name="[be]"></a>_sys_seek</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, retarget_io.o(.text._sys_seek))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _sys_seek
</UL>
<BR>[Called By]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_writebuf
</UL>

<P><STRONG><a name="[bf]"></a>_sys_write</STRONG> (Thumb, 118 bytes, Stack size 40 bytes, retarget_io.o(.text._sys_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 204<LI>Call Chain = _sys_write &rArr; stdout_putchar &rArr; EventRecordData &rArr; EventRecordItem &rArr; UnlockRecord
</UL>
<BR>[Calls]<UL><LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stdout_putchar
</UL>
<BR>[Called By]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_writebuf
</UL>

<P><STRONG><a name="[124]"></a>arm_2d_get_absolute_location</STRONG> (Thumb, 66 bytes, Stack size 8 bytes, arm_2d.o(.text.arm_2d_get_absolute_location))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = arm_2d_get_absolute_location
</UL>
<BR>[Called By]<UL><LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__arm_2d_region_calculator
</UL>

<P><STRONG><a name="[154]"></a>arm_2d_helper_convert_ms_to_ticks</STRONG> (Thumb, 62 bytes, Stack size 24 bytes, arm_2d_helper.o(.text.arm_2d_helper_convert_ms_to_ticks))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = arm_2d_helper_convert_ms_to_ticks
</UL>
<BR>[Called By]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;progress_bar_flowing_init
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;busy_wheel2_show
</UL>

<P><STRONG><a name="[13b]"></a>arm_2d_helper_convert_ticks_to_ms</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, arm_2d_helper.o(.text.arm_2d_helper_convert_ticks_to_ms))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = arm_2d_helper_convert_ticks_to_ms &rArr; __aeabi_ldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__pfb_draw_navigation
</UL>

<P><STRONG><a name="[142]"></a>arm_2d_helper_draw_box</STRONG> (Thumb, 328 bytes, Stack size 80 bytes, arm_2d_helper.o(.text.arm_2d_helper_draw_box))
<BR><BR>[Stack]<UL><LI>Max Depth = 1176 + Unknown Stack Size
<LI>Call Chain = arm_2d_helper_draw_box &rArr; arm_2dp_rgb565_fill_colour_with_opacity &rArr; __arm_2d_op_invoke &rArr; __arm_2d_op_frontend &rArr; __arm_2d_op_frontend_op_decoder &rArr; __arm_2d_op_frontend_region_process_with_src &rArr; __tile_clipped_pave &rArr; __arm_2d_region_calculator &rArr; __arm_2d_issue_sub_task_copy_origin_masks &rArr; __arm_2d_sub_task_depose &rArr; __depose_virtual_resource &rArr; __arm_2d_tile_get_root &rArr; __arm_2d_tile_get_1st_derived_child_or_root &rArr; arm_2d_region_intersect
</UL>
<BR>[Calls]<UL><LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_2d_op_wait_async
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_2dp_rgb565_fill_colour_with_opacity
</UL>
<BR>[Called By]<UL><LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_2d_helper_pfb_task
</UL>

<P><STRONG><a name="[13a]"></a>arm_2d_helper_get_reference_clock_frequency</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, arm_2d_helper.o(.text.arm_2d_helper_get_reference_clock_frequency))
<BR><BR>[Called By]<UL><LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_2d_helper_init
<LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__pfb_draw_navigation
</UL>

<P><STRONG><a name="[ee]"></a>arm_2d_helper_get_system_timestamp</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, arm_2d_helper.o(.text.arm_2d_helper_get_system_timestamp))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = arm_2d_helper_get_system_timestamp &rArr; get_system_ticks &rArr; check_systick
</UL>
<BR>[Calls]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_system_ticks
</UL>
<BR>[Called By]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__arm_2d_helper_perf_counter_stop
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__arm_2d_helper_perf_counter_start
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__arm_2d_helper_is_time_out
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;progress_bar_flowing_init
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;progress_bar_drill_init
</UL>

<P><STRONG><a name="[143]"></a>arm_2d_helper_init</STRONG> (Thumb, 146 bytes, Stack size 40 bytes, arm_2d_helper.o(.text.arm_2d_helper_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = arm_2d_helper_init
</UL>
<BR>[Calls]<UL><LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_2d_helper_get_reference_clock_frequency
</UL>
<BR>[Called By]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_2d_helper_pfb_init
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_extra_controls_init
</UL>

<P><STRONG><a name="[ec]"></a>arm_2d_helper_pfb_flush</STRONG> (Thumb, 180 bytes, Stack size 40 bytes, arm_2d_helper_pfb.o(.text.arm_2d_helper_pfb_flush))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = arm_2d_helper_pfb_flush
</UL>
<BR>[Called By]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__arm_2d_helper_pfb_report_rendering_complete
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__arm_2d_helper_enqueue_pfb
</UL>

<P><STRONG><a name="[13e]"></a>arm_2d_helper_pfb_init</STRONG> (Thumb, 696 bytes, Stack size 96 bytes, arm_2d_helper_pfb.o(.text.arm_2d_helper_pfb_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 136 + Unknown Stack Size
<LI>Call Chain = arm_2d_helper_pfb_init &rArr; arm_2d_helper_init
</UL>
<BR>[Calls]<UL><LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__arm_2d_helper_pfb_free
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_2d_helper_init
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr8
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_scene_player_init
</UL>

<P><STRONG><a name="[144]"></a>arm_2d_helper_pfb_task</STRONG> (Thumb, 612 bytes, Stack size 40 bytes, arm_2d_helper_pfb.o(.text.arm_2d_helper_pfb_task))
<BR><BR>[Stack]<UL><LI>Max Depth = 1216 + Unknown Stack Size
<LI>Call Chain = arm_2d_helper_pfb_task &rArr; arm_2d_helper_draw_box &rArr; arm_2dp_rgb565_fill_colour_with_opacity &rArr; __arm_2d_op_invoke &rArr; __arm_2d_op_frontend &rArr; __arm_2d_op_frontend_op_decoder &rArr; __arm_2d_op_frontend_region_process_with_src &rArr; __tile_clipped_pave &rArr; __arm_2d_region_calculator &rArr; __arm_2d_issue_sub_task_copy_origin_masks &rArr; __arm_2d_sub_task_depose &rArr; __depose_virtual_resource &rArr; __arm_2d_tile_get_root &rArr; __arm_2d_tile_get_1st_derived_child_or_root &rArr; arm_2d_region_intersect
</UL>
<BR>[Calls]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__arm_2d_helper_perf_counter_stop
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__arm_2d_helper_perf_counter_start
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__arm_2d_helper_pfb_drawing_iteration_end
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__arm_2d_helper_pfb_drawing_iteration_begin
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_2d_op_wait_async
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_2d_helper_draw_box
</UL>
<BR>[Called By]<UL><LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_2d_scene_player_task
</UL>

<P><STRONG><a name="[129]"></a>arm_2d_helper_pfb_update_dependency</STRONG> (Thumb, 198 bytes, Stack size 36 bytes, arm_2d_helper_pfb.o(.text.arm_2d_helper_pfb_update_dependency))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = arm_2d_helper_pfb_update_dependency
</UL>
<BR>[Called By]<UL><LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_2d_scene_player_task
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__arm_2d_scene_player_register_on_draw_navigation_event_handler
</UL>

<P><STRONG><a name="[f0]"></a>arm_2d_helper_swap_rgb16</STRONG> (Thumb, 252 bytes, Stack size 64 bytes, arm_2d_helper_pfb.o(.text.arm_2d_helper_swap_rgb16))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = arm_2d_helper_swap_rgb16
</UL>
<BR>[Called By]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__arm_2d_helper_low_level_rendering
</UL>

<P><STRONG><a name="[145]"></a>arm_2d_init</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, arm_2d.o(.text.arm_2d_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + Unknown Stack Size
<LI>Call Chain = arm_2d_init &rArr; __arm_2d_init
</UL>
<BR>[Calls]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__arm_2d_init
</UL>
<BR>[Called By]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[146]"></a>arm_2d_op_init</STRONG> (Thumb, 54 bytes, Stack size 24 bytes, arm_2d.o(.text.arm_2d_op_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 24 + Unknown Stack Size
<LI>Call Chain = arm_2d_op_init
</UL>
<BR>[Calls]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spinning_wheel_init
</UL>

<P><STRONG><a name="[132]"></a>arm_2d_op_wait_async</STRONG> (Thumb, 10 bytes, Stack size 4 bytes, arm_2d.o(.text.arm_2d_op_wait_async))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = arm_2d_op_wait_async
</UL>
<BR>[Called By]<UL><LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_2d_helper_pfb_task
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_2d_helper_draw_box
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_round_corner_box
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_draw_char
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;busy_wheel2_show
<LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__pfb_draw_handler
<LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__pfb_draw_navigation
</UL>

<P><STRONG><a name="[f5]"></a>arm_2d_region_intersect</STRONG> (Thumb, 346 bytes, Stack size 64 bytes, arm_2d.o(.text.arm_2d_region_intersect))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = arm_2d_region_intersect
</UL>
<BR>[Called By]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__arm_2d_helper_pfb_drawing_iteration_begin
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_2d_tile_generate_child
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__arm_2d_op_frontend_region_process
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__arm_2d_op_frontend_region_process_with_src
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__arm_2d_tile_get_1st_derived_child_or_root
</UL>

<P><STRONG><a name="[158]"></a>arm_2d_scene_player_append_scenes</STRONG> (Thumb, 152 bytes, Stack size 40 bytes, arm_2d_helper_scene.o(.text.arm_2d_scene_player_append_scenes))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = arm_2d_scene_player_append_scenes
</UL>
<BR>[Called By]<UL><LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disp_adapter0_init
</UL>

<P><STRONG><a name="[147]"></a>arm_2d_scene_player_task</STRONG> (Thumb, 1084 bytes, Stack size 272 bytes, arm_2d_helper_scene.o(.text.arm_2d_scene_player_task))
<BR><BR>[Stack]<UL><LI>Max Depth = 1488 + Unknown Stack Size
<LI>Call Chain = arm_2d_scene_player_task &rArr; arm_2d_helper_pfb_task &rArr; arm_2d_helper_draw_box &rArr; arm_2dp_rgb565_fill_colour_with_opacity &rArr; __arm_2d_op_invoke &rArr; __arm_2d_op_frontend &rArr; __arm_2d_op_frontend_op_decoder &rArr; __arm_2d_op_frontend_region_process_with_src &rArr; __tile_clipped_pave &rArr; __arm_2d_region_calculator &rArr; __arm_2d_issue_sub_task_copy_origin_masks &rArr; __arm_2d_sub_task_depose &rArr; __depose_virtual_resource &rArr; __arm_2d_tile_get_root &rArr; __arm_2d_tile_get_1st_derived_child_or_root &rArr; arm_2d_region_intersect
</UL>
<BR>[Calls]<UL><LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__arm_2d_scene_player_next_scene
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_2d_helper_pfb_task
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_2d_helper_pfb_update_dependency
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disp_adapter0_task
</UL>

<P><STRONG><a name="[f9]"></a>arm_2d_set_default_frame_buffer</STRONG> (Thumb, 78 bytes, Stack size 32 bytes, arm_2d.o(.text.arm_2d_set_default_frame_buffer))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = arm_2d_set_default_frame_buffer
</UL>
<BR>[Called By]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__arm_2d_helper_pfb_drawing_iteration_end
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__arm_2d_helper_pfb_drawing_iteration_begin
</UL>

<P><STRONG><a name="[f8]"></a>arm_2d_tile_generate_child</STRONG> (Thumb, 150 bytes, Stack size 40 bytes, arm_2d.o(.text.arm_2d_tile_generate_child))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = arm_2d_tile_generate_child &rArr; arm_2d_region_intersect
</UL>
<BR>[Calls]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_2d_region_intersect
</UL>
<BR>[Called By]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__arm_2d_helper_pfb_drawing_iteration_begin
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__tile_non_negtive_location_pave
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__tile_clipped_pave
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__arm_2d_op_frontend_region_process
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__arm_2d_op_frontend_region_process_with_src
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__arm_2d_region_calculator
</UL>

<P><STRONG><a name="[11d]"></a>arm_2d_tile_get_root</STRONG> (Thumb, 32 bytes, Stack size 24 bytes, arm_2d.o(.text.arm_2d_tile_get_root))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = arm_2d_tile_get_root &rArr; __arm_2d_tile_get_1st_derived_child_or_root &rArr; arm_2d_region_intersect
</UL>
<BR>[Calls]<UL><LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__arm_2d_tile_get_1st_derived_child_or_root
</UL>
<BR>[Called By]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__arm_2d_valid_mask
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__arm_2d_op_frontend_region_process
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__arm_2d_op_frontend_region_process_with_src
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__arm_2d_region_calculator
</UL>

<P><STRONG><a name="[149]"></a>arm_2dp_rgb16_draw_pattern</STRONG> (Thumb, 168 bytes, Stack size 40 bytes, arm_2d_draw.o(.text.arm_2dp_rgb16_draw_pattern))
<BR><BR>[Stack]<UL><LI>Max Depth = 1104 + Unknown Stack Size
<LI>Call Chain = arm_2dp_rgb16_draw_pattern &rArr; __arm_2d_op_invoke &rArr; __arm_2d_op_frontend &rArr; __arm_2d_op_frontend_op_decoder &rArr; __arm_2d_op_frontend_region_process_with_src &rArr; __tile_clipped_pave &rArr; __arm_2d_region_calculator &rArr; __arm_2d_issue_sub_task_copy_origin_masks &rArr; __arm_2d_sub_task_depose &rArr; __depose_virtual_resource &rArr; __arm_2d_tile_get_root &rArr; __arm_2d_tile_get_1st_derived_child_or_root &rArr; arm_2d_region_intersect
</UL>
<BR>[Calls]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__arm_2d_op_invoke
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__arm_2d_op_acquire
</UL>
<BR>[Called By]<UL><LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_draw_char
</UL>

<P><STRONG><a name="[130]"></a>arm_2dp_rgb16_fill_colour</STRONG> (Thumb, 104 bytes, Stack size 32 bytes, arm_2d_draw.o(.text.arm_2dp_rgb16_fill_colour))
<BR><BR>[Stack]<UL><LI>Max Depth = 1096 + Unknown Stack Size
<LI>Call Chain = arm_2dp_rgb16_fill_colour &rArr; __arm_2d_op_invoke &rArr; __arm_2d_op_frontend &rArr; __arm_2d_op_frontend_op_decoder &rArr; __arm_2d_op_frontend_region_process_with_src &rArr; __tile_clipped_pave &rArr; __arm_2d_region_calculator &rArr; __arm_2d_issue_sub_task_copy_origin_masks &rArr; __arm_2d_sub_task_depose &rArr; __depose_virtual_resource &rArr; __arm_2d_tile_get_root &rArr; __arm_2d_tile_get_1st_derived_child_or_root &rArr; arm_2d_region_intersect
</UL>
<BR>[Calls]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__arm_2d_op_invoke
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__arm_2d_op_acquire
</UL>
<BR>[Called By]<UL><LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__pfb_draw_handler
</UL>

<P><STRONG><a name="[14b]"></a>arm_2dp_rgb565_fill_colour_with_mask_and_opacity</STRONG> (Thumb, 170 bytes, Stack size 40 bytes, arm_2d_alpha_blending.o(.text.arm_2dp_rgb565_fill_colour_with_mask_and_opacity))
<BR><BR>[Stack]<UL><LI>Max Depth = 1104 + Unknown Stack Size
<LI>Call Chain = arm_2dp_rgb565_fill_colour_with_mask_and_opacity &rArr; __arm_2d_op_invoke &rArr; __arm_2d_op_frontend &rArr; __arm_2d_op_frontend_op_decoder &rArr; __arm_2d_op_frontend_region_process_with_src &rArr; __tile_clipped_pave &rArr; __arm_2d_region_calculator &rArr; __arm_2d_issue_sub_task_copy_origin_masks &rArr; __arm_2d_sub_task_depose &rArr; __depose_virtual_resource &rArr; __arm_2d_tile_get_root &rArr; __arm_2d_tile_get_1st_derived_child_or_root &rArr; arm_2d_region_intersect
</UL>
<BR>[Calls]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__arm_2d_valid_mask
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__arm_2d_op_invoke
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__arm_2d_op_acquire
</UL>
<BR>[Called By]<UL><LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_round_corner_box
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;busy_wheel2_show
</UL>

<P><STRONG><a name="[137]"></a>arm_2dp_rgb565_fill_colour_with_opacity</STRONG> (Thumb, 126 bytes, Stack size 32 bytes, arm_2d_alpha_blending.o(.text.arm_2dp_rgb565_fill_colour_with_opacity))
<BR><BR>[Stack]<UL><LI>Max Depth = 1096 + Unknown Stack Size
<LI>Call Chain = arm_2dp_rgb565_fill_colour_with_opacity &rArr; __arm_2d_op_invoke &rArr; __arm_2d_op_frontend &rArr; __arm_2d_op_frontend_op_decoder &rArr; __arm_2d_op_frontend_region_process_with_src &rArr; __tile_clipped_pave &rArr; __arm_2d_region_calculator &rArr; __arm_2d_issue_sub_task_copy_origin_masks &rArr; __arm_2d_sub_task_depose &rArr; __depose_virtual_resource &rArr; __arm_2d_tile_get_root &rArr; __arm_2d_tile_get_1st_derived_child_or_root &rArr; arm_2d_region_intersect
</UL>
<BR>[Calls]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__arm_2d_op_invoke
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__arm_2d_op_acquire
</UL>
<BR>[Called By]<UL><LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_2d_helper_draw_box
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_round_corner_box
<LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__pfb_draw_navigation
</UL>

<P><STRONG><a name="[156]"></a>arm_cos_f32</STRONG> (Thumb, 264 bytes, Stack size 36 bytes, fastmathfunctions.o(.text.arm_cos_f32))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = arm_cos_f32
</UL>
<BR>[Called By]<UL><LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;busy_wheel_init
</UL>

<P><STRONG><a name="[14c]"></a>arm_extra_controls_init</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, controls.o(.text.arm_extra_controls_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 84 + Unknown Stack Size
<LI>Call Chain = arm_extra_controls_init &rArr; progress_bar_flowing_init &rArr; arm_2d_helper_get_system_timestamp &rArr; get_system_ticks &rArr; check_systick
</UL>
<BR>[Calls]<UL><LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_2d_helper_init
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;progress_bar_simple_init
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;progress_bar_flowing_init
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;progress_bar_drill_init
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spinning_wheel_init
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;busy_wheel_init
</UL>
<BR>[Called By]<UL><LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disp_adapter0_init
</UL>

<P><STRONG><a name="[13c]"></a>arm_lcd_printf</STRONG> (Thumb, 92 bytes, Stack size 40 bytes, lcd_printf.o(.text.arm_lcd_printf))
<BR><BR>[Stack]<UL><LI>Max Depth = 1216 + Unknown Stack Size
<LI>Call Chain = arm_lcd_printf &rArr; arm_lcd_puts &rArr; lcd_draw_char &rArr; arm_2dp_rgb16_draw_pattern &rArr; __arm_2d_op_invoke &rArr; __arm_2d_op_frontend &rArr; __arm_2d_op_frontend_op_decoder &rArr; __arm_2d_op_frontend_region_process_with_src &rArr; __tile_clipped_pave &rArr; __arm_2d_region_calculator &rArr; __arm_2d_issue_sub_task_copy_origin_masks &rArr; __arm_2d_sub_task_depose &rArr; __depose_virtual_resource &rArr; __arm_2d_tile_get_root &rArr; __arm_2d_tile_get_1st_derived_child_or_root &rArr; arm_2d_region_intersect
</UL>
<BR>[Calls]<UL><LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_lcd_puts
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vsnprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__pfb_draw_navigation
</UL>

<P><STRONG><a name="[152]"></a>arm_lcd_puts</STRONG> (Thumb, 354 bytes, Stack size 24 bytes, lcd_printf.o(.text.arm_lcd_puts))
<BR><BR>[Stack]<UL><LI>Max Depth = 1176 + Unknown Stack Size
<LI>Call Chain = arm_lcd_puts &rArr; lcd_draw_char &rArr; arm_2dp_rgb16_draw_pattern &rArr; __arm_2d_op_invoke &rArr; __arm_2d_op_frontend &rArr; __arm_2d_op_frontend_op_decoder &rArr; __arm_2d_op_frontend_region_process_with_src &rArr; __tile_clipped_pave &rArr; __arm_2d_region_calculator &rArr; __arm_2d_issue_sub_task_copy_origin_masks &rArr; __arm_2d_sub_task_depose &rArr; __depose_virtual_resource &rArr; __arm_2d_tile_get_root &rArr; __arm_2d_tile_get_1st_derived_child_or_root &rArr; arm_2d_region_intersect
</UL>
<BR>[Calls]<UL><LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_draw_char
</UL>
<BR>[Called By]<UL><LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_lcd_printf
</UL>

<P><STRONG><a name="[139]"></a>arm_lcd_text_location</STRONG> (Thumb, 108 bytes, Stack size 4 bytes, lcd_printf.o(.text.arm_lcd_text_location))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = arm_lcd_text_location
</UL>
<BR>[Called By]<UL><LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_lcd_text_set_font
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_lcd_text_set_draw_region
<LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__pfb_draw_navigation
</UL>

<P><STRONG><a name="[138]"></a>arm_lcd_text_set_colour</STRONG> (Thumb, 34 bytes, Stack size 4 bytes, lcd_printf.o(.text.arm_lcd_text_set_colour))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = arm_lcd_text_set_colour
</UL>
<BR>[Called By]<UL><LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__pfb_draw_navigation
</UL>

<P><STRONG><a name="[136]"></a>arm_lcd_text_set_draw_region</STRONG> (Thumb, 66 bytes, Stack size 24 bytes, lcd_printf.o(.text.arm_lcd_text_set_draw_region))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = arm_lcd_text_set_draw_region &rArr; arm_lcd_text_location
</UL>
<BR>[Calls]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_lcd_text_location
</UL>
<BR>[Called By]<UL><LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__pfb_draw_navigation
</UL>

<P><STRONG><a name="[135]"></a>arm_lcd_text_set_font</STRONG> (Thumb, 138 bytes, Stack size 24 bytes, lcd_printf.o(.text.arm_lcd_text_set_font))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = arm_lcd_text_set_font &rArr; arm_lcd_text_location
</UL>
<BR>[Calls]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_lcd_text_location
</UL>
<BR>[Called By]<UL><LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__pfb_draw_navigation
</UL>

<P><STRONG><a name="[134]"></a>arm_lcd_text_set_target_framebuffer</STRONG> (Thumb, 42 bytes, Stack size 4 bytes, lcd_printf.o(.text.arm_lcd_text_set_target_framebuffer))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = arm_lcd_text_set_target_framebuffer
</UL>
<BR>[Called By]<UL><LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__pfb_draw_navigation
</UL>

<P><STRONG><a name="[155]"></a>arm_sin_f32</STRONG> (Thumb, 256 bytes, Stack size 36 bytes, fastmathfunctions.o(.text.arm_sin_f32))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = arm_sin_f32
</UL>
<BR>[Called By]<UL><LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;busy_wheel_init
</UL>

<P><STRONG><a name="[133]"></a>busy_wheel2_show</STRONG> (Thumb, 298 bytes, Stack size 64 bytes, busy_wheel.o(.text.busy_wheel2_show))
<BR><BR>[Stack]<UL><LI>Max Depth = 1168 + Unknown Stack Size
<LI>Call Chain = busy_wheel2_show &rArr; arm_2dp_rgb565_fill_colour_with_mask_and_opacity &rArr; __arm_2d_op_invoke &rArr; __arm_2d_op_frontend &rArr; __arm_2d_op_frontend_op_decoder &rArr; __arm_2d_op_frontend_region_process_with_src &rArr; __tile_clipped_pave &rArr; __arm_2d_region_calculator &rArr; __arm_2d_issue_sub_task_copy_origin_masks &rArr; __arm_2d_sub_task_depose &rArr; __depose_virtual_resource &rArr; __arm_2d_tile_get_root &rArr; __arm_2d_tile_get_1st_derived_child_or_root &rArr; arm_2d_region_intersect
</UL>
<BR>[Calls]<UL><LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_2dp_rgb565_fill_colour_with_mask_and_opacity
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_2d_op_wait_async
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__arm_2d_helper_is_time_out
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_2d_helper_convert_ms_to_ticks
</UL>
<BR>[Called By]<UL><LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__pfb_draw_handler
</UL>

<P><STRONG><a name="[14d]"></a>busy_wheel_init</STRONG> (Thumb, 252 bytes, Stack size 32 bytes, busy_wheel.o(.text.busy_wheel_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = busy_wheel_init &rArr; arm_cos_f32
</UL>
<BR>[Calls]<UL><LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_cos_f32
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_sin_f32
</UL>
<BR>[Called By]<UL><LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_extra_controls_init
</UL>

<P><STRONG><a name="[157]"></a>disp_adapter0_init</STRONG> (Thumb, 68 bytes, Stack size 8 bytes, arm_2d_disp_adapter_0.o(.text.disp_adapter0_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 232 + Unknown Stack Size
<LI>Call Chain = disp_adapter0_init &rArr; __user_scene_player_init &rArr; arm_2d_helper_pfb_init &rArr; arm_2d_helper_init
</UL>
<BR>[Calls]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__arm_2d_scene_player_register_on_draw_navigation_event_handler
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_2d_scene_player_append_scenes
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_extra_controls_init
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_scene_player_init
</UL>
<BR>[Called By]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[159]"></a>disp_adapter0_task</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, arm_2d_disp_adapter_0.o(.text.disp_adapter0_task))
<BR><BR>[Stack]<UL><LI>Max Depth = 1496 + Unknown Stack Size
<LI>Call Chain = disp_adapter0_task &rArr; arm_2d_scene_player_task &rArr; arm_2d_helper_pfb_task &rArr; arm_2d_helper_draw_box &rArr; arm_2dp_rgb565_fill_colour_with_opacity &rArr; __arm_2d_op_invoke &rArr; __arm_2d_op_frontend &rArr; __arm_2d_op_frontend_op_decoder &rArr; __arm_2d_op_frontend_region_process_with_src &rArr; __tile_clipped_pave &rArr; __arm_2d_region_calculator &rArr; __arm_2d_issue_sub_task_copy_origin_masks &rArr; __arm_2d_sub_task_depose &rArr; __depose_virtual_resource &rArr; __arm_2d_tile_get_root &rArr; __arm_2d_tile_get_1st_derived_child_or_root &rArr; arm_2d_region_intersect
</UL>
<BR>[Calls]<UL><LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_2d_scene_player_task
</UL>
<BR>[Called By]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[131]"></a>draw_round_corner_box</STRONG> (Thumb, 652 bytes, Stack size 144 bytes, shape_round_corner_box.o(.text.draw_round_corner_box))
<BR><BR>[Stack]<UL><LI>Max Depth = 1248 + Unknown Stack Size
<LI>Call Chain = draw_round_corner_box &rArr; arm_2dp_rgb565_fill_colour_with_mask_and_opacity &rArr; __arm_2d_op_invoke &rArr; __arm_2d_op_frontend &rArr; __arm_2d_op_frontend_op_decoder &rArr; __arm_2d_op_frontend_region_process_with_src &rArr; __tile_clipped_pave &rArr; __arm_2d_region_calculator &rArr; __arm_2d_issue_sub_task_copy_origin_masks &rArr; __arm_2d_sub_task_depose &rArr; __depose_virtual_resource &rArr; __arm_2d_tile_get_root &rArr; __arm_2d_tile_get_1st_derived_child_or_root &rArr; arm_2d_region_intersect
</UL>
<BR>[Calls]<UL><LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_2dp_rgb565_fill_colour_with_mask_and_opacity
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_2d_op_wait_async
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_2dp_rgb565_fill_colour_with_opacity
</UL>
<BR>[Called By]<UL><LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__pfb_draw_handler
</UL>

<P><STRONG><a name="[da]"></a>get_system_ticks</STRONG> (Thumb, 94 bytes, Stack size 40 bytes, perf_counter.o(.text.get_system_ticks))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = get_system_ticks &rArr; check_systick
</UL>
<BR>[Calls]<UL><LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_systick
</UL>
<BR>[Called By]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_2d_helper_get_system_timestamp
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_perf_counter
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventRecorderTimerGetCount
</UL>

<P><STRONG><a name="[12f]"></a>init_cycle_counter</STRONG> (Thumb, 138 bytes, Stack size 40 bytes, perf_counter.o(.text.init_cycle_counter))
<BR><BR>[Stack]<UL><LI>Max Depth = 124<LI>Call Chain = init_cycle_counter &rArr; update_perf_counter &rArr; get_system_ticks &rArr; check_systick
</UL>
<BR>[Calls]<UL><LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_perf_counter
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__perf_os_patch_init
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Config
</UL>
<BR>[Called By]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__perf_counter_init
</UL>

<P><STRONG><a name="[153]"></a>lcd_draw_char</STRONG> (Thumb, 258 bytes, Stack size 48 bytes, lcd_printf.o(.text.lcd_draw_char))
<BR><BR>[Stack]<UL><LI>Max Depth = 1152 + Unknown Stack Size
<LI>Call Chain = lcd_draw_char &rArr; arm_2dp_rgb16_draw_pattern &rArr; __arm_2d_op_invoke &rArr; __arm_2d_op_frontend &rArr; __arm_2d_op_frontend_op_decoder &rArr; __arm_2d_op_frontend_region_process_with_src &rArr; __tile_clipped_pave &rArr; __arm_2d_region_calculator &rArr; __arm_2d_issue_sub_task_copy_origin_masks &rArr; __arm_2d_sub_task_depose &rArr; __depose_virtual_resource &rArr; __arm_2d_tile_get_root &rArr; __arm_2d_tile_get_1st_derived_child_or_root &rArr; arm_2d_region_intersect
</UL>
<BR>[Calls]<UL><LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_2d_op_wait_async
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_2dp_rgb16_draw_pattern
</UL>
<BR>[Called By]<UL><LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_lcd_puts
</UL>

<P><STRONG><a name="[76]"></a>main</STRONG> (Thumb, 134 bytes, Stack size 40 bytes, main.o(.text.main))
<BR><BR>[Stack]<UL><LI>Max Depth = 1536 + Unknown Stack Size
<LI>Call Chain = main &rArr; disp_adapter0_task &rArr; arm_2d_scene_player_task &rArr; arm_2d_helper_pfb_task &rArr; arm_2d_helper_draw_box &rArr; arm_2dp_rgb565_fill_colour_with_opacity &rArr; __arm_2d_op_invoke &rArr; __arm_2d_op_frontend &rArr; __arm_2d_op_frontend_op_decoder &rArr; __arm_2d_op_frontend_region_process_with_src &rArr; __tile_clipped_pave &rArr; __arm_2d_region_calculator &rArr; __arm_2d_issue_sub_task_copy_origin_masks &rArr; __arm_2d_sub_task_depose &rArr; __depose_virtual_resource &rArr; __arm_2d_tile_get_root &rArr; __arm_2d_tile_get_1st_derived_child_or_root &rArr; arm_2d_region_intersect
</UL>
<BR>[Calls]<UL><LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disp_adapter0_task
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disp_adapter0_init
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_2d_init
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GLCD_DrawRectangle
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GLCD_ClearScreen
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GLCD_SetBackgroundColor
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GLCD_SetForegroundColor
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GLCD_Initialize
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventRecorderInitialize
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_cycle_counter
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printf
</UL>
<BR>[Called By]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_main
</UL>

<P><STRONG><a name="[14f]"></a>progress_bar_drill_init</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, progress_bar_drill.o(.text.progress_bar_drill_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = progress_bar_drill_init &rArr; arm_2d_helper_get_system_timestamp &rArr; get_system_ticks &rArr; check_systick
</UL>
<BR>[Calls]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_2d_helper_get_system_timestamp
</UL>
<BR>[Called By]<UL><LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_extra_controls_init
</UL>

<P><STRONG><a name="[150]"></a>progress_bar_flowing_init</STRONG> (Thumb, 90 bytes, Stack size 24 bytes, progress_bar_flowing.o(.text.progress_bar_flowing_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = progress_bar_flowing_init &rArr; arm_2d_helper_get_system_timestamp &rArr; get_system_ticks &rArr; check_systick
</UL>
<BR>[Calls]<UL><LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_2d_helper_convert_ms_to_ticks
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_2d_helper_get_system_timestamp
</UL>
<BR>[Called By]<UL><LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_extra_controls_init
</UL>

<P><STRONG><a name="[151]"></a>progress_bar_simple_init</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, progress_bar_simple.o(.text.progress_bar_simple_init))
<BR><BR>[Called By]<UL><LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_extra_controls_init
</UL>

<P><STRONG><a name="[14e]"></a>spinning_wheel_init</STRONG> (Thumb, 102 bytes, Stack size 32 bytes, spinning_wheel.o(.text.spinning_wheel_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 56 + Unknown Stack Size
<LI>Call Chain = spinning_wheel_init &rArr; arm_2d_op_init
</UL>
<BR>[Calls]<UL><LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_2d_op_init
</UL>
<BR>[Called By]<UL><LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_extra_controls_init
</UL>

<P><STRONG><a name="[15c]"></a>update_perf_counter</STRONG> (Thumb, 158 bytes, Stack size 40 bytes, perf_counter.o(.text.update_perf_counter))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = update_perf_counter &rArr; get_system_ticks &rArr; check_systick
</UL>
<BR>[Calls]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_system_ticks
</UL>
<BR>[Called By]<UL><LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_cycle_counter
</UL>

<P><STRONG><a name="[2c]"></a>user_code_insert_to_systick_handler</STRONG> (Thumb, 176 bytes, Stack size 12 bytes, perf_counter.o(.text.user_code_insert_to_systick_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = user_code_insert_to_systick_handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> systick_wrapper_ual.o(.text)
</UL>
<P><STRONG><a name="[9d]"></a>_btod_d2e</STRONG> (Thumb, 62 bytes, Stack size 0 bytes, btod.o(CL$$btod_d2e))
<BR><BR>[Calls]<UL><LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_d2e_norm_op1
</UL>
<BR>[Called By]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[163]"></a>_d2e_denorm_low</STRONG> (Thumb, 70 bytes, Stack size 0 bytes, btod.o(CL$$btod_d2e_denorm_low))
<BR><BR>[Called By]<UL><LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_d2e_norm_op1
</UL>

<P><STRONG><a name="[162]"></a>_d2e_norm_op1</STRONG> (Thumb, 96 bytes, Stack size 0 bytes, btod.o(CL$$btod_d2e_norm_op1))
<BR><BR>[Calls]<UL><LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_d2e_denorm_low
</UL>
<BR>[Called By]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_d2e
</UL>

<P><STRONG><a name="[164]"></a>__btod_div_common</STRONG> (Thumb, 696 bytes, Stack size 24 bytes, btod.o(CL$$btod_div_common))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __btod_div_common
</UL>
<BR>[Called By]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_ediv
</UL>

<P><STRONG><a name="[165]"></a>_e2e</STRONG> (Thumb, 220 bytes, Stack size 24 bytes, btod.o(CL$$btod_e2e))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = _e2e
</UL>
<BR>[Called By]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_emul
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_ediv
</UL>

<P><STRONG><a name="[9e]"></a>_btod_ediv</STRONG> (Thumb, 42 bytes, Stack size 28 bytes, btod.o(CL$$btod_ediv))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = _btod_ediv &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_e2e
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__btod_div_common
</UL>
<BR>[Called By]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_etento
</UL>

<P><STRONG><a name="[9f]"></a>_btod_emul</STRONG> (Thumb, 42 bytes, Stack size 28 bytes, btod.o(CL$$btod_emul))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__btod_mult_common
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_e2e
</UL>
<BR>[Called By]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_etento
</UL>

<P><STRONG><a name="[166]"></a>__btod_mult_common</STRONG> (Thumb, 580 bytes, Stack size 16 bytes, btod.o(CL$$btod_mult_common))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __btod_mult_common
</UL>
<BR>[Called By]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_emul
</UL>

<P><STRONG><a name="[a1]"></a>__ARM_fpclassify</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, fpclassify.o(i.__ARM_fpclassify))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __ARM_fpclassify
</UL>
<BR>[Called By]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_hex_real
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec_real
</UL>

<P><STRONG><a name="[99]"></a>_is_digit</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, __printf_wp.o(i._is_digit))
<BR><BR>[Called By]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__printf
</UL>

<P><STRONG><a name="[30]"></a>fputc</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, fputc.o(i.fputc))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = fputc &rArr; __flsbuf_byte
</UL>
<BR>[Calls]<UL><LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__flsbuf_byte
</UL>
<BR>[Address Reference Count : 1]<UL><LI> _printf_char_file.o(.text)
</UL>
<P><STRONG><a name="[6d]"></a>_get_lc_numeric</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, lc_numeric_c.o(locale$$code))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _get_lc_numeric &rArr; strcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init_lc_numeric_2
</UL>

<P><STRONG><a name="[31]"></a>_get_lc_ctype</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, lc_ctype_c.o(locale$$code))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _get_lc_ctype &rArr; strcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init_lc_ctype_2
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rt_ctype_table.o(.text)
</UL>
<P><STRONG><a name="[66]"></a>_fp_init</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, fpinit.o(x$fpl$fpinit))
<BR><BR>[Called By]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init_fp_1
</UL>

<P><STRONG><a name="[1a6]"></a>__fplib_config_fpu_vfp</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, fpinit.o(x$fpl$fpinit), UNUSED)

<P><STRONG><a name="[1a7]"></a>__fplib_config_pureend_doubles</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, fpinit.o(x$fpl$fpinit), UNUSED)

<P><STRONG><a name="[48]"></a>_printf_fp_dec</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, printf1.o(x$fpl$printf1))
<BR><BR>[Stack]<UL><LI>Max Depth = 324<LI>Call Chain = _printf_fp_dec &rArr; _printf_fp_dec_real &rArr; _fp_digits &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec_real
</UL>
<BR>[Called By]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_g
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_e
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_f
</UL>

<P><STRONG><a name="[4c]"></a>_printf_fp_hex</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, printf2.o(x$fpl$printf2))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = _printf_fp_hex &rArr; _printf_fp_hex_real &rArr; _printf_fp_infnan &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_hex_real
</UL>
<BR>[Called By]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_a
</UL>
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[e5]"></a>delay_ms</STRONG> (Thumb, 54 bytes, Stack size 4 bytes, glcd_v2m-mps2.o(.text.delay_ms))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = delay_ms
</UL>
<BR>[Called By]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GLCD_Initialize
</UL>

<P><STRONG><a name="[e6]"></a>wr_reg</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, glcd_v2m-mps2.o(.text.wr_reg))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = wr_reg &rArr; wr_dat &rArr; spi_tran
</UL>
<BR>[Calls]<UL><LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wr_dat
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wr_cmd
</UL>
<BR>[Called By]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GLCD_SetWindow
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GLCD_Initialize
</UL>

<P><STRONG><a name="[dd]"></a>wr_cmd</STRONG> (Thumb, 94 bytes, Stack size 16 bytes, glcd_v2m-mps2.o(.text.wr_cmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = wr_cmd &rArr; spi_tran
</UL>
<BR>[Calls]<UL><LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_tran
</UL>
<BR>[Called By]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GLCD_DrawVLine
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GLCD_DrawHLine
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wr_reg
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GLCD_DrawBitmap
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GLCD_ClearScreen
</UL>

<P><STRONG><a name="[161]"></a>wr_dat</STRONG> (Thumb, 96 bytes, Stack size 16 bytes, glcd_v2m-mps2.o(.text.wr_dat))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = wr_dat &rArr; spi_tran
</UL>
<BR>[Calls]<UL><LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_tran
</UL>
<BR>[Called By]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wr_reg
</UL>

<P><STRONG><a name="[dc]"></a>GLCD_SetWindow</STRONG> (Thumb, 116 bytes, Stack size 32 bytes, glcd_v2m-mps2.o(.text.GLCD_SetWindow))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = GLCD_SetWindow &rArr; wr_reg &rArr; wr_dat &rArr; spi_tran
</UL>
<BR>[Calls]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wr_reg
</UL>
<BR>[Called By]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GLCD_DrawVLine
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GLCD_DrawHLine
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GLCD_DrawBitmap
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GLCD_ClearScreen
</UL>

<P><STRONG><a name="[de]"></a>wr_dat_start</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, glcd_v2m-mps2.o(.text.wr_dat_start))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = wr_dat_start &rArr; spi_tran
</UL>
<BR>[Calls]<UL><LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_tran
</UL>
<BR>[Called By]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GLCD_DrawVLine
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GLCD_DrawHLine
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GLCD_DrawBitmap
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GLCD_ClearScreen
</UL>

<P><STRONG><a name="[df]"></a>wr_dat_only</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, glcd_v2m-mps2.o(.text.wr_dat_only))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = wr_dat_only &rArr; spi_tran
</UL>
<BR>[Calls]<UL><LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_tran
</UL>
<BR>[Called By]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GLCD_DrawVLine
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GLCD_DrawHLine
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GLCD_DrawBitmap
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GLCD_ClearScreen
</UL>

<P><STRONG><a name="[e0]"></a>wr_dat_stop</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, glcd_v2m-mps2.o(.text.wr_dat_stop))
<BR><BR>[Called By]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GLCD_DrawVLine
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GLCD_DrawHLine
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GLCD_DrawBitmap
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GLCD_ClearScreen
</UL>

<P><STRONG><a name="[160]"></a>spi_tran</STRONG> (Thumb, 50 bytes, Stack size 4 bytes, glcd_v2m-mps2.o(.text.spi_tran))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = spi_tran
</UL>
<BR>[Called By]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wr_dat_only
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wr_dat_start
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wr_dat
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wr_cmd
</UL>

<P><STRONG><a name="[f3]"></a>__arm_2d_helper_pfb_drawing_iteration_begin</STRONG> (Thumb, 904 bytes, Stack size 120 bytes, arm_2d_helper_pfb.o(.text.__arm_2d_helper_pfb_drawing_iteration_begin))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = __arm_2d_helper_pfb_drawing_iteration_begin &rArr; arm_2d_tile_generate_child &rArr; arm_2d_region_intersect
</UL>
<BR>[Calls]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_2d_set_default_frame_buffer
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_2d_region_intersect
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__arm_2d_helper_pfb_free
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__arm_2d_helper_pfb_new
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__arm_2d_helper_pfb_get_next_dirty_region
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_2d_tile_generate_child
</UL>
<BR>[Called By]<UL><LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_2d_helper_pfb_task
</UL>

<P><STRONG><a name="[fa]"></a>__arm_2d_helper_pfb_drawing_iteration_end</STRONG> (Thumb, 148 bytes, Stack size 24 bytes, arm_2d_helper_pfb.o(.text.__arm_2d_helper_pfb_drawing_iteration_end))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = __arm_2d_helper_pfb_drawing_iteration_end &rArr; __arm_2d_helper_low_level_rendering &rArr; __arm_2d_helper_enqueue_pfb &rArr; arm_2d_helper_pfb_flush
</UL>
<BR>[Calls]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_2d_set_default_frame_buffer
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__arm_2d_helper_low_level_rendering
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__arm_2d_helper_pfb_get_next_dirty_region
</UL>
<BR>[Called By]<UL><LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_2d_helper_pfb_task
</UL>

<P><STRONG><a name="[f6]"></a>__arm_2d_helper_pfb_get_next_dirty_region</STRONG> (Thumb, 80 bytes, Stack size 16 bytes, arm_2d_helper_pfb.o(.text.__arm_2d_helper_pfb_get_next_dirty_region))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __arm_2d_helper_pfb_get_next_dirty_region &rArr; __when_dirty_region_list_is_empty
</UL>
<BR>[Calls]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__when_dirty_region_list_is_empty
</UL>
<BR>[Called By]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__arm_2d_helper_pfb_drawing_iteration_end
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__arm_2d_helper_pfb_drawing_iteration_begin
</UL>

<P><STRONG><a name="[ef]"></a>__arm_2d_helper_low_level_rendering</STRONG> (Thumb, 96 bytes, Stack size 16 bytes, arm_2d_helper_pfb.o(.text.__arm_2d_helper_low_level_rendering))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = __arm_2d_helper_low_level_rendering &rArr; __arm_2d_helper_enqueue_pfb &rArr; arm_2d_helper_pfb_flush
</UL>
<BR>[Calls]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_2d_helper_swap_rgb16
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__arm_2d_helper_enqueue_pfb
</UL>
<BR>[Called By]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__arm_2d_helper_pfb_drawing_iteration_end
</UL>

<P><STRONG><a name="[fb]"></a>__when_dirty_region_list_is_empty</STRONG> (Thumb, 96 bytes, Stack size 8 bytes, arm_2d_helper_pfb.o(.text.__when_dirty_region_list_is_empty))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __when_dirty_region_list_is_empty
</UL>
<BR>[Called By]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__arm_2d_helper_pfb_get_next_dirty_region
</UL>

<P><STRONG><a name="[eb]"></a>__arm_2d_helper_enqueue_pfb</STRONG> (Thumb, 172 bytes, Stack size 40 bytes, arm_2d_helper_pfb.o(.text.__arm_2d_helper_enqueue_pfb))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = __arm_2d_helper_enqueue_pfb &rArr; arm_2d_helper_pfb_flush
</UL>
<BR>[Calls]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_2d_helper_pfb_flush
</UL>
<BR>[Called By]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__arm_2d_helper_low_level_rendering
</UL>

<P><STRONG><a name="[148]"></a>__arm_2d_scene_player_next_scene</STRONG> (Thumb, 162 bytes, Stack size 40 bytes, arm_2d_helper_scene.o(.text.__arm_2d_scene_player_next_scene))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = __arm_2d_scene_player_next_scene
</UL>
<BR>[Called By]<UL><LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_2d_scene_player_task
</UL>

<P><STRONG><a name="[104]"></a>__arm_2d_rgb565_unpack</STRONG> (Thumb, 76 bytes, Stack size 12 bytes, arm_2d_alpha_blending.o(.text.__arm_2d_rgb565_unpack))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = __arm_2d_rgb565_unpack
</UL>
<BR>[Called By]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__arm_2d_impl_rgb565_colour_filling_channel_mask_opacity
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__arm_2d_impl_rgb565_colour_filling_channel_mask
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__arm_2d_impl_rgb565_colour_filling_mask_opacity
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__arm_2d_impl_rgb565_colour_filling_mask
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__arm_2d_impl_rgb565_colour_filling_with_opacity
</UL>

<P><STRONG><a name="[105]"></a>__arm_2d_rgb565_pack</STRONG> (Thumb, 78 bytes, Stack size 8 bytes, arm_2d_alpha_blending.o(.text.__arm_2d_rgb565_pack))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __arm_2d_rgb565_pack
</UL>
<BR>[Called By]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__arm_2d_impl_rgb565_colour_filling_channel_mask_opacity
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__arm_2d_impl_rgb565_colour_filling_channel_mask
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__arm_2d_impl_rgb565_colour_filling_mask_opacity
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__arm_2d_impl_rgb565_colour_filling_mask
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__arm_2d_impl_rgb565_colour_filling_with_opacity
</UL>

<P><STRONG><a name="[12a]"></a>__depose_virtual_resource</STRONG> (Thumb, 92 bytes, Stack size 32 bytes, arm_2d.o(.text.__depose_virtual_resource))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = __depose_virtual_resource &rArr; __arm_2d_tile_get_root &rArr; __arm_2d_tile_get_1st_derived_child_or_root &rArr; arm_2d_region_intersect
</UL>
<BR>[Calls]<UL><LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__arm_2d_tile_get_root
</UL>
<BR>[Called By]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__arm_2d_sub_task_depose
</UL>

<P><STRONG><a name="[118]"></a>__arm_2d_op_use_default_frame_buffer</STRONG> (Thumb, 58 bytes, Stack size 8 bytes, arm_2d.o(.text.__arm_2d_op_use_default_frame_buffer))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __arm_2d_op_use_default_frame_buffer
</UL>
<BR>[Called By]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__arm_2d_op_frontend_op_decoder
</UL>

<P><STRONG><a name="[119]"></a>__arm_2d_op_frontend_region_process_with_src</STRONG> (Thumb, 924 bytes, Stack size 120 bytes, arm_2d.o(.text.__arm_2d_op_frontend_region_process_with_src))
<BR><BR>[Stack]<UL><LI>Max Depth = 1008<LI>Call Chain = __arm_2d_op_frontend_region_process_with_src &rArr; __tile_clipped_pave &rArr; __arm_2d_region_calculator &rArr; __arm_2d_issue_sub_task_copy_origin_masks &rArr; __arm_2d_sub_task_depose &rArr; __depose_virtual_resource &rArr; __arm_2d_tile_get_root &rArr; __arm_2d_tile_get_1st_derived_child_or_root &rArr; arm_2d_region_intersect
</UL>
<BR>[Calls]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_2d_region_intersect
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_2d_tile_generate_child
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__tile_non_negtive_location_pave
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__tile_clipped_pave
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_2d_tile_get_root
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__arm_2d_op_ensure_resource
</UL>
<BR>[Called By]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__arm_2d_op_frontend_op_decoder
</UL>

<P><STRONG><a name="[11a]"></a>__arm_2d_op_frontend_region_process</STRONG> (Thumb, 310 bytes, Stack size 96 bytes, arm_2d.o(.text.__arm_2d_op_frontend_region_process))
<BR><BR>[Stack]<UL><LI>Max Depth = 544 + Unknown Stack Size
<LI>Call Chain = __arm_2d_op_frontend_region_process &rArr; __arm_2d_tile_process &rArr; __arm_2d_issue_sub_task_tile_process &rArr; __arm_2d_sub_task_depose &rArr; __depose_virtual_resource &rArr; __arm_2d_tile_get_root &rArr; __arm_2d_tile_get_1st_derived_child_or_root &rArr; arm_2d_region_intersect
</UL>
<BR>[Calls]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_2d_region_intersect
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_2d_tile_generate_child
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__arm_2d_tile_process
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_2d_tile_get_root
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__arm_2d_op_ensure_resource
</UL>
<BR>[Called By]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__arm_2d_op_frontend_op_decoder
</UL>

<P><STRONG><a name="[11b]"></a>__arm_2d_op_frontend_control</STRONG> (Thumb, 12 bytes, Stack size 4 bytes, arm_2d.o(.text.__arm_2d_op_frontend_control))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = __arm_2d_op_frontend_control
</UL>
<BR>[Called By]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__arm_2d_op_frontend_op_decoder
</UL>

<P><STRONG><a name="[11f]"></a>__tile_clipped_pave</STRONG> (Thumb, 222 bytes, Stack size 80 bytes, arm_2d.o(.text.__tile_clipped_pave))
<BR><BR>[Stack]<UL><LI>Max Depth = 888<LI>Call Chain = __tile_clipped_pave &rArr; __arm_2d_region_calculator &rArr; __arm_2d_issue_sub_task_copy_origin_masks &rArr; __arm_2d_sub_task_depose &rArr; __depose_virtual_resource &rArr; __arm_2d_tile_get_root &rArr; __arm_2d_tile_get_1st_derived_child_or_root &rArr; arm_2d_region_intersect
</UL>
<BR>[Calls]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_2d_tile_generate_child
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__arm_2d_region_calculator
</UL>
<BR>[Called By]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__arm_2d_op_frontend_region_process_with_src
</UL>

<P><STRONG><a name="[120]"></a>__tile_non_negtive_location_pave</STRONG> (Thumb, 112 bytes, Stack size 56 bytes, arm_2d.o(.text.__tile_non_negtive_location_pave))
<BR><BR>[Stack]<UL><LI>Max Depth = 864<LI>Call Chain = __tile_non_negtive_location_pave &rArr; __arm_2d_region_calculator &rArr; __arm_2d_issue_sub_task_copy_origin_masks &rArr; __arm_2d_sub_task_depose &rArr; __depose_virtual_resource &rArr; __arm_2d_tile_get_root &rArr; __arm_2d_tile_get_1st_derived_child_or_root &rArr; arm_2d_region_intersect
</UL>
<BR>[Calls]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_2d_tile_generate_child
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__arm_2d_region_calculator
</UL>
<BR>[Called By]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__arm_2d_op_frontend_region_process_with_src
</UL>

<P><STRONG><a name="[11e]"></a>__arm_2d_tile_process</STRONG> (Thumb, 76 bytes, Stack size 56 bytes, arm_2d.o(.text.__arm_2d_tile_process))
<BR><BR>[Stack]<UL><LI>Max Depth = 448 + Unknown Stack Size
<LI>Call Chain = __arm_2d_tile_process &rArr; __arm_2d_issue_sub_task_tile_process &rArr; __arm_2d_sub_task_depose &rArr; __depose_virtual_resource &rArr; __arm_2d_tile_get_root &rArr; __arm_2d_tile_get_1st_derived_child_or_root &rArr; arm_2d_region_intersect
</UL>
<BR>[Calls]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__arm_2d_issue_sub_task_tile_process
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__arm_2d_tile_region_caculator
</UL>
<BR>[Called By]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__arm_2d_op_frontend_region_process
</UL>

<P><STRONG><a name="[12c]"></a>arm_2d_is_root_tile</STRONG> (Thumb, 16 bytes, Stack size 4 bytes, arm_2d.o(.text.arm_2d_is_root_tile))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = arm_2d_is_root_tile
</UL>
<BR>[Called By]<UL><LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__arm_2d_tile_get_1st_derived_child_or_root
</UL>

<P><STRONG><a name="[122]"></a>__arm_2d_region_calculator</STRONG> (Thumb, 2552 bytes, Stack size 408 bytes, arm_2d.o(.text.__arm_2d_region_calculator))
<BR><BR>[Stack]<UL><LI>Max Depth = 808<LI>Call Chain = __arm_2d_region_calculator &rArr; __arm_2d_issue_sub_task_copy_origin_masks &rArr; __arm_2d_sub_task_depose &rArr; __depose_virtual_resource &rArr; __arm_2d_tile_get_root &rArr; __arm_2d_tile_get_1st_derived_child_or_root &rArr; arm_2d_region_intersect
</UL>
<BR>[Calls]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_2d_tile_generate_child
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_2d_get_absolute_location
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_2d_tile_get_root
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__arm_2d_issue_sub_task_copy_origin_masks
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__arm_2d_issue_sub_task_copy_origin
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__arm_2d_issue_sub_task_fill_origin
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__arm_2d_issue_sub_task_copy_with_mask
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__arm_2d_issue_sub_task_copy
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__arm_2d_issue_sub_task_fill_with_mask
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__arm_2d_issue_sub_task_fill
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__load_virtual_resource
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__arm_2d_source_side_tile_mirror_preprocess
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__arm_2d_tile_region_caculator
</UL>
<BR>[Called By]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__tile_non_negtive_location_pave
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__tile_clipped_pave
</UL>

<P><STRONG><a name="[123]"></a>__arm_2d_tile_region_caculator</STRONG> (Thumb, 380 bytes, Stack size 56 bytes, arm_2d.o(.text.__arm_2d_tile_region_caculator))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = __arm_2d_tile_region_caculator &rArr; __arm_2d_tile_get_root &rArr; __arm_2d_tile_get_1st_derived_child_or_root &rArr; arm_2d_region_intersect
</UL>
<BR>[Calls]<UL><LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__arm_2d_tile_get_root
</UL>
<BR>[Called By]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__arm_2d_tile_process
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__arm_2d_region_calculator
</UL>

<P><STRONG><a name="[125]"></a>__arm_2d_source_side_tile_mirror_preprocess</STRONG> (Thumb, 354 bytes, Stack size 20 bytes, arm_2d.o(.text.__arm_2d_source_side_tile_mirror_preprocess))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = __arm_2d_source_side_tile_mirror_preprocess
</UL>
<BR>[Called By]<UL><LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__arm_2d_region_calculator
</UL>

<P><STRONG><a name="[126]"></a>__load_virtual_resource</STRONG> (Thumb, 252 bytes, Stack size 40 bytes, arm_2d.o(.text.__load_virtual_resource))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = __load_virtual_resource
</UL>
<BR>[Called By]<UL><LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__arm_2d_region_calculator
</UL>

<P><STRONG><a name="[13d]"></a>__user_scene_player_init</STRONG> (Thumb, 68 bytes, Stack size 88 bytes, arm_2d_disp_adapter_0.o(.text.__user_scene_player_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 224 + Unknown Stack Size
<LI>Call Chain = __user_scene_player_init &rArr; arm_2d_helper_pfb_init &rArr; arm_2d_helper_init
</UL>
<BR>[Calls]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_2d_helper_pfb_init
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr8
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disp_adapter0_init
</UL>

<P><STRONG><a name="[32]"></a>__pfb_draw_navigation</STRONG> (Thumb, 260 bytes, Stack size 56 bytes, arm_2d_disp_adapter_0.o(.text.__pfb_draw_navigation))
<BR><BR>[Stack]<UL><LI>Max Depth = 1272 + Unknown Stack Size
<LI>Call Chain = __pfb_draw_navigation &rArr; arm_lcd_printf &rArr; arm_lcd_puts &rArr; lcd_draw_char &rArr; arm_2dp_rgb16_draw_pattern &rArr; __arm_2d_op_invoke &rArr; __arm_2d_op_frontend &rArr; __arm_2d_op_frontend_op_decoder &rArr; __arm_2d_op_frontend_region_process_with_src &rArr; __tile_clipped_pave &rArr; __arm_2d_region_calculator &rArr; __arm_2d_issue_sub_task_copy_origin_masks &rArr; __arm_2d_sub_task_depose &rArr; __depose_virtual_resource &rArr; __arm_2d_tile_get_root &rArr; __arm_2d_tile_get_1st_derived_child_or_root &rArr; arm_2d_region_intersect
</UL>
<BR>[Calls]<UL><LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_2d_op_wait_async
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_2dp_rgb565_fill_colour_with_opacity
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_2d_helper_convert_ticks_to_ms
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_2d_helper_get_reference_clock_frequency
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_lcd_printf
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_lcd_text_set_font
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_lcd_text_location
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_lcd_text_set_draw_region
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_lcd_text_set_target_framebuffer
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_lcd_text_set_colour
</UL>
<BR>[Address Reference Count : 1]<UL><LI> arm_2d_disp_adapter_0.o(.text.disp_adapter0_init)
</UL>
<P><STRONG><a name="[3b]"></a>__pfb_draw_handler</STRONG> (Thumb, 250 bytes, Stack size 72 bytes, arm_2d_disp_adapter_0.o(.text.__pfb_draw_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 1320 + Unknown Stack Size
<LI>Call Chain = __pfb_draw_handler &rArr; draw_round_corner_box &rArr; arm_2dp_rgb565_fill_colour_with_mask_and_opacity &rArr; __arm_2d_op_invoke &rArr; __arm_2d_op_frontend &rArr; __arm_2d_op_frontend_op_decoder &rArr; __arm_2d_op_frontend_region_process_with_src &rArr; __tile_clipped_pave &rArr; __arm_2d_region_calculator &rArr; __arm_2d_issue_sub_task_copy_origin_masks &rArr; __arm_2d_sub_task_depose &rArr; __depose_virtual_resource &rArr; __arm_2d_tile_get_root &rArr; __arm_2d_tile_get_1st_derived_child_or_root &rArr; arm_2d_region_intersect
</UL>
<BR>[Calls]<UL><LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_2dp_rgb16_fill_colour
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_2d_op_wait_async
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_round_corner_box
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;busy_wheel2_show
</UL>
<BR>[Address Reference Count : 1]<UL><LI> arm_2d_disp_adapter_0.o(.data.disp_adapter0_init.s_tScenes)
</UL>
<P><STRONG><a name="[3c]"></a>__on_frame_start</STRONG> (Thumb, 8 bytes, Stack size 4 bytes, arm_2d_disp_adapter_0.o(.text.__on_frame_start))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = __on_frame_start
</UL>
<BR>[Address Reference Count : 1]<UL><LI> arm_2d_disp_adapter_0.o(.data.disp_adapter0_init.s_tScenes)
</UL>
<P><STRONG><a name="[3d]"></a>__on_frame_complete</STRONG> (Thumb, 8 bytes, Stack size 4 bytes, arm_2d_disp_adapter_0.o(.text.__on_frame_complete))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = __on_frame_complete
</UL>
<BR>[Address Reference Count : 1]<UL><LI> arm_2d_disp_adapter_0.o(.data.disp_adapter0_init.s_tScenes)
</UL>
<P><STRONG><a name="[34]"></a>__on_each_frame_complete</STRONG> (Thumb, 228 bytes, Stack size 48 bytes, arm_2d_disp_adapter_0.o(.text.__on_each_frame_complete))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = __on_each_frame_complete &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>
<BR>[Address Reference Count : 1]<UL><LI> arm_2d_disp_adapter_0.o(.rodata..L__const.__user_scene_player_init.tCFG)
</UL>
<P><STRONG><a name="[d4]"></a>crc16_ccitt</STRONG> (Thumb, 130 bytes, Stack size 16 bytes, eventrecorder.o(.text.crc16_ccitt))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = crc16_ccitt
</UL>
<BR>[Called By]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventRecorderInitialize
</UL>

<P><STRONG><a name="[c4]"></a>EventGetTS</STRONG> (Thumb, 90 bytes, Stack size 24 bytes, eventrecorder.o(.text.EventGetTS))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = EventGetTS &rArr; EventRecorderTimerGetCount &rArr; get_system_ticks &rArr; check_systick
</UL>
<BR>[Calls]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventRecorderTimerGetCount
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UpdateTS
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UnlockTS_Overflow
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LockTS_Overflow
</UL>
<BR>[Called By]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventRecorderInitialize
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventRecordData
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventRecorderStart
</UL>

<P><STRONG><a name="[cb]"></a>EventRecordItem</STRONG> (Thumb, 254 bytes, Stack size 56 bytes, eventrecorder.o(.text.EventRecordItem))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = EventRecordItem &rArr; UnlockRecord
</UL>
<BR>[Calls]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IncrementRecordsDumped
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IncrementRecordsWritten
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UnlockRecord
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LockRecord
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetRecordIndex
</UL>
<BR>[Called By]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventRecorderInitialize
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventRecordData
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventRecorderStart
</UL>

<P><STRONG><a name="[c6]"></a>LockTS_Overflow</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, eventrecorder.o(.text.LockTS_Overflow))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = LockTS_Overflow &rArr; atomic_wr8
</UL>
<BR>[Calls]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atomic_wr8
</UL>
<BR>[Called By]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventGetTS
</UL>

<P><STRONG><a name="[c7]"></a>UnlockTS_Overflow</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, eventrecorder.o(.text.UnlockTS_Overflow))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = UnlockTS_Overflow &rArr; atomic_wr8
</UL>
<BR>[Calls]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atomic_wr8
</UL>
<BR>[Called By]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventGetTS
</UL>

<P><STRONG><a name="[c8]"></a>UpdateTS</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, eventrecorder.o(.text.UpdateTS))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = UpdateTS &rArr; atomic_wr32
</UL>
<BR>[Calls]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atomic_wr32
</UL>
<BR>[Called By]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventGetTS
</UL>

<P><STRONG><a name="[ce]"></a>GetRecordIndex</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, eventrecorder.o(.text.GetRecordIndex))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = GetRecordIndex &rArr; atomic_inc32
</UL>
<BR>[Calls]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atomic_inc32
</UL>
<BR>[Called By]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventRecordItem
</UL>

<P><STRONG><a name="[cf]"></a>LockRecord</STRONG> (Thumb, 54 bytes, Stack size 28 bytes, eventrecorder.o(.text.LockRecord))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = LockRecord
</UL>
<BR>[Called By]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventRecordItem
</UL>

<P><STRONG><a name="[d0]"></a>UnlockRecord</STRONG> (Thumb, 50 bytes, Stack size 28 bytes, eventrecorder.o(.text.UnlockRecord))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = UnlockRecord
</UL>
<BR>[Called By]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventRecordItem
</UL>

<P><STRONG><a name="[d1]"></a>IncrementRecordsWritten</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, eventrecorder.o(.text.IncrementRecordsWritten))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = IncrementRecordsWritten &rArr; atomic_inc32
</UL>
<BR>[Calls]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atomic_inc32
</UL>
<BR>[Called By]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventRecordItem
</UL>

<P><STRONG><a name="[d2]"></a>IncrementRecordsDumped</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, eventrecorder.o(.text.IncrementRecordsDumped))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = IncrementRecordsDumped &rArr; atomic_inc32
</UL>
<BR>[Calls]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atomic_inc32
</UL>
<BR>[Called By]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventRecordItem
</UL>

<P><STRONG><a name="[ca]"></a>EventCheckFilter</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, eventrecorder.o(.text.EventCheckFilter))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = EventCheckFilter
</UL>
<BR>[Called By]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventRecordData
</UL>

<P><STRONG><a name="[cd]"></a>GetContext</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, eventrecorder.o(.text.GetContext))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = GetContext &rArr; atomic_inc8
</UL>
<BR>[Calls]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atomic_inc8
</UL>
<BR>[Called By]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventRecordData
</UL>

<P><STRONG><a name="[e7]"></a>atomic_inc8</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, eventrecorder.o(.text.atomic_inc8))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = atomic_inc8
</UL>
<BR>[Called By]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetContext
</UL>

<P><STRONG><a name="[e9]"></a>atomic_wr8</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, eventrecorder.o(.text.atomic_wr8))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = atomic_wr8
</UL>
<BR>[Called By]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UnlockTS_Overflow
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LockTS_Overflow
</UL>

<P><STRONG><a name="[ea]"></a>atomic_wr32</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, eventrecorder.o(.text.atomic_wr32))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = atomic_wr32
</UL>
<BR>[Called By]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UpdateTS
</UL>

<P><STRONG><a name="[e8]"></a>atomic_inc32</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, eventrecorder.o(.text.atomic_inc32))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = atomic_inc32
</UL>
<BR>[Called By]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IncrementRecordsDumped
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IncrementRecordsWritten
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetRecordIndex
</UL>

<P><STRONG><a name="[140]"></a>stdout_putchar</STRONG> (Thumb, 124 bytes, Stack size 24 bytes, retarget_io.o(.text.stdout_putchar))
<BR><BR>[Stack]<UL><LI>Max Depth = 164<LI>Call Chain = stdout_putchar &rArr; EventRecordData &rArr; EventRecordItem &rArr; UnlockRecord
</UL>
<BR>[Calls]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventRecordData
</UL>
<BR>[Called By]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_write
</UL>

<P><STRONG><a name="[15a]"></a>check_systick</STRONG> (Thumb, 92 bytes, Stack size 4 bytes, perf_counter.o(.text.check_systick))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = check_systick
</UL>
<BR>[Called By]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_system_ticks
</UL>

<P><STRONG><a name="[15b]"></a>SysTick_Config</STRONG> (Thumb, 72 bytes, Stack size 8 bytes, perf_counter.o(.text.SysTick_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SysTick_Config
</UL>
<BR>[Called By]<UL><LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_cycle_counter
</UL>

<P><STRONG><a name="[2f]"></a>_printf_input_char</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, _printf_char_common.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> _printf_char_common.o(.text)
</UL>
<P><STRONG><a name="[9b]"></a>_fp_digits</STRONG> (Thumb, 432 bytes, Stack size 96 bytes, _printf_fp_dec.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 220<LI>Call Chain = _fp_digits &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ll_udiv10
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_emul
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_ediv
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_d2e
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_etento
</UL>
<BR>[Called By]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec_real
</UL>
<P>
<H3>
Undefined Global Symbols
</H3><HR></body></html>
